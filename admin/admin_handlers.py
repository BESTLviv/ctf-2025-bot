import logging
from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramForbiddenError
from states.admin import AdminState
from database import Database
import config
from handlers.user_handlers import send_main_menu

logger = logging.getLogger(__name__)

def get_admin_menu_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–†–æ–∑—Å–∏–ª–∫–∞ üì¢"), types.KeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥–∏ üîÑ")],
            [types.KeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞–Ω –ø–æ–¥—ñ—ó ‚öôÔ∏è"), types.KeyboardButton(text="–í–∏—Ö—ñ–¥ –∑ –∞–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—ñ üö™")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def register_admin_handlers(dp: Dispatcher, db: Database, bot):
    @dp.message(lambda message: message.text and message.text.lower() == config.ADMIN_ENTRY_PHRASE.lower())
    async def process_admin_entry(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state is None:
            logger.info(f"Received admin entry phrase from user {message.from_user.id}")
            await state.clear()
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—ñ:")
            await state.set_state(AdminState.password)

    @dp.message(AdminState.password)
    async def process_admin_password(message: types.Message, state: FSMContext):
        if message.text == config.ADMIN_PASSWORD:
            await message.answer("–í—ñ—Ç–∞—é, –≤–∏ –≤ –∞–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—ñ!", reply_markup=get_admin_menu_keyboard())
            await state.set_state(AdminState.main)
        else:
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            await state.set_state(AdminState.password)

    @dp.message(lambda message: message.text in ["–†–æ–∑—Å–∏–ª–∫–∞ üì¢", "–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥–∏ üîÑ", "–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞–Ω –ø–æ–¥—ñ—ó ‚öôÔ∏è", "–í–∏—Ö—ñ–¥ –∑ –∞–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—ñ üö™"], AdminState.main)
    async def process_admin_menu(message: types.Message, state: FSMContext):
        if message.text == "–†–æ–∑—Å–∏–ª–∫–∞ üì¢":
            await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:")
            await state.set_state(AdminState.broadcast)
        elif message.text == "–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥–∏ üîÑ":
            await message.answer(
                "–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
                "/set_team_status <team_name> <test_task_status> <is_participant>\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /set_team_status –∂–æ–ø–∞ true true"
            )
            await state.set_state(AdminState.team_status)
        elif message.text == "–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞–Ω –ø–æ–¥—ñ—ó ‚öôÔ∏è":
            await message.answer(
                "–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
                "/set_event_state <state>\n"
                "–î–æ–ø—É—Å—Ç–∏–º—ñ —Å—Ç–∞–Ω–∏: registration, test_task, main_task, finished\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /set_event_state test_task"
            )
            await state.set_state(AdminState.event_state)
        elif message.text == "–í–∏—Ö—ñ–¥ –∑ –∞–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—ñ üö™":
            await state.clear()
            await send_main_menu(message, state, db, registered=db.is_user_registered(message.from_user.id), name=db.get_user_data(message.from_user.id))

    @dp.message(AdminState.main)
    async def process_invalid_admin_menu(message: types.Message, state: FSMContext):
        await message.answer("–í—ñ—Ç–∞—é, –≤–∏ –≤ –∞–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—ñ!\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∏–∂—á–µ!", reply_markup=get_admin_menu_keyboard())

    @dp.message(AdminState.broadcast)
    async def process_broadcast_text(message: types.Message, state: FSMContext):
        broadcast_text = message.text
        try:
            participants = db.get_participants()
            failed_count = 0
            for participant in participants:
                if "chat_id" in participant:
                    try:
                        await bot.send_message(
                            chat_id=participant["chat_id"],
                            text=broadcast_text,
                            parse_mode="Markdown"
                        )
                    except TelegramForbiddenError:
                        logger.warning(f"User {participant['user_id']} blocked the bot, skipping.")
                        failed_count += 1
                    except Exception as e:
                        logger.error(f"Error sending broadcast to user {participant['user_id']}: {e}")
                        failed_count += 1
            await message.answer(f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {len(participants) - failed_count}/{len(participants)}.")
        except Exception as e:
            logger.error(f"Error during broadcast: {e}")
            await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏.")
        await message.answer("–í—ñ—Ç–∞—é, –≤–∏ –≤ –∞–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—ñ!", reply_markup=get_admin_menu_keyboard())
        await state.set_state(AdminState.main)

    @dp.message(Command("set_team_status"), AdminState.team_status)
    async def set_team_status(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        if user_id not in config.ADMIN_ID:
            logger.warning(f"User {user_id} attempted /set_team_status but is not in ADMIN_ID: {config.ADMIN_ID}")
            await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏! üö´")
            await message.answer("–í—ñ—Ç–∞—é, –≤–∏ –≤ –∞–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—ñ!", reply_markup=get_admin_menu_keyboard())
            await state.set_state(AdminState.main)
            return
        args = message.text.split(maxsplit=3)
        if len(args) != 4:
            await message.answer(
                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /set_team_status <team_name> <test_task_status> <is_participant>\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /set_team_status –∂–æ–ø–∞ true true"
            )
            return
        team_name, test_task_status_str, is_participant_str = args[1], args[2].lower(), args[3].lower()
        if test_task_status_str not in ["true", "false"] or is_participant_str not in ["true", "false"]:
            await message.answer(
                "–ó–Ω–∞—á–µ–Ω–Ω—è test_task_status —ñ is_participant –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ 'true' –∞–±–æ 'false'!\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /set_team_status –∂–æ–ø–∞ true true"
            )
            return
        test_task_status = test_task_status_str == "true"
        is_participant = is_participant_str == "true"
        try:
            result = db.teams.update_one(
                {"team_name": team_name, "category": "CTF2025"},
                {"$set": {"test_task_status": test_task_status, "is_participant": is_participant}}
            )
            if result.matched_count == 0:
                await message.answer(f"–ö–æ–º–∞–Ω–¥—É {team_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! üò¢")
            else:
                await message.answer(
                    f"–°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥–∏ {team_name} –æ–Ω–æ–≤–ª–µ–Ω–æ: "
                    f"test_task_status={test_task_status}, is_participant={is_participant} üö©"
                )
                logger.info(f"Team {team_name} status updated by admin {user_id}")
        except Exception as e:
            logger.error(f"Error updating team {team_name} status: {e}")
            await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∫–æ–º–∞–Ω–¥–∏! üòì")
        await message.answer("–í—ñ—Ç–∞—é, –≤–∏ –≤ –∞–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—ñ!", reply_markup=get_admin_menu_keyboard())
        await state.set_state(AdminState.main)

    @dp.message(Command("set_event_state"), AdminState.event_state)
    async def set_event_state(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        if user_id not in config.ADMIN_ID:
            logger.warning(f"User {user_id} attempted /set_event_state but is not in ADMIN_ID: {config.ADMIN_ID}")
            await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏! üö´")
            await message.answer("–í—ñ—Ç–∞—é, –≤–∏ –≤ –∞–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—ñ!", reply_markup=get_admin_menu_keyboard())
            await state.set_state(AdminState.main)
            return
        args = message.text.split(maxsplit=1)
        if len(args) != 2:
            await message.answer(
                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /set_event_state <state>\n"
                "–î–æ–ø—É—Å—Ç–∏–º—ñ —Å—Ç–∞–Ω–∏: registration, test_task, main_task, finished\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /set_event_state test_task"
            )
            return
        new_state = args[1].lower()
        valid_states = ["registration", "test_task", "main_task", "finished"]
        if new_state not in valid_states:
            await message.answer(
                f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Å—Ç–∞–Ω! –î–æ–ø—É—Å—Ç–∏–º—ñ —Å—Ç–∞–Ω–∏: {', '.join(valid_states)}\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /set_event_state test_task"
            )
            return
        try:
            db.event_state.update_one(
                {"event_id": "CTF2025"},
                {"$set": {"current_state": new_state}},
                upsert=True
            )
            await message.answer(f"–°—Ç–∞–Ω –ø–æ–¥—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_state} ‚öôÔ∏è")
            logger.info(f"Event state updated to {new_state} by admin {user_id}")
        except Exception as e:
            logger.error(f"Error updating event state: {e}")
            await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞–Ω—É –ø–æ–¥—ñ—ó! üòì")
        await message.answer("–í—ñ—Ç–∞—é, –≤–∏ –≤ –∞–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—ñ!", reply_markup=get_admin_menu_keyboard())
        await state.set_state(AdminState.main)