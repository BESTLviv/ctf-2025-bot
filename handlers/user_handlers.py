import logging
import random
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from states.registration import Registration
from config import ADMIN_ID, MONGODB_URI
import config
from database import Database
from handlers.info_ctf_handlers import register_info_ctf_handlers
from handlers.info_best_handlers import register_info_best_handlers
from handlers.team_handlers import register_team_handlers

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

UNIVERSITIES = ["üéì –ù–£–õ–ü", "üéì –õ–ù–£", "üéì –ù–õ–¢–£", "üéì IT STEP", "üéì –£–ö–£", "–Ü–Ω—à–∏–π"]
COURSES = ["1 –∫—É—Ä—Å ü§ì", "2 –∫—É—Ä—Å ü§ì", "3 –∫—É—Ä—Å ü§ì", "4 –∫—É—Ä—Å ü§ì", "–ú–∞–≥—ñ—Å—Ç—Ä–∞—Ç—É—Ä–∞ ü§ì", "–ê—Å–ø—ñ—Ä–∞–Ω—Ç—É—Ä–∞ ü§ì"]
MAIN_MENU_MESSAGES = [
    "–í—ñ—Ç–∞—é, —á–µ–º–ø—ñ–æ–Ω–µ! –¢–∏ —â–æ–π–Ω–æ –ø–æ—Ç—Ä–∞–ø–∏–≤ —É —Å–≤—ñ—Ç –∑–∞–≥–∞–¥–æ–∫ —ñ –µ–∫—Å–ø–ª–æ–π—Ç—ñ–≤ BEST CTF! üö©",
    "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –Ω–∞ BEST CTF! –¢–≤–æ—ó –ø—Ä–∏–≥–æ–¥–∏ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è —Ç—É—Ç.üòâ",
    "–ô–æ-—Ö–æ-—Ö–æ! –Ü —Ñ–ª–∞–≥ —É –∫–∏—à–µ–Ω—é! –õ–µ—Ç‚Äôs –≥–æ—É! üö©",
    "–°–µ–∑–æ–Ω –ø–æ–ª—é–≤–∞–Ω–Ω—è –∑–∞ –±–∞–π—Ç–∞–º–∏ ‚ÄúBEST CTF 2025‚Äù –≤—ñ–¥–∫—Ä–∏—Ç–æ! –ü–æ–∫–∞–∂–∏ —Å–µ–±–µüî•",
    "–£–≤–∞–≥–∞, —É–≤–∞–≥–∞! –£ –≥—Ä—É –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤–∏–π –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç –Ω–∞ —á–µ–º–ø—ñ–æ–Ω—Å—å–∫–∏–π –∫—É–±–æ–∫ BEST CTF. üòé"
]
COMPLIMENTS = [
    "–û–æ–æ! –£ –º–µ–Ω–µ —è–∫–æ—Å—å –±—É–≤ –∫—ñ—Ç —ñ–∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º üòÅ",
    "–ë–∞—á–∏–ª–∞ –∑—Ä–∞–Ω–∫—É —Ç–≤–æ—î —ñ–º‚Äô—è –≤ –≥–æ—Ä–æ—Å–∫–æ–ø—ñ. –ö–∞–∂—É—Ç—å, —Ç–∞–∫—ñ –ª—é–¥–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —à–ª—è—Ö—É ü´°",
    "–ö—Ä—É—Ç–æ! –ù–µ —á—É–ª–∞ —Ü—å–æ–≥–æ —ñ–º–µ–Ω—ñ, –≤—ñ–¥–∫–æ–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∏ –≤–∏–º–µ—Ä–ª–∏ üòß",
    "–ß–µ—Å–Ω–æ? –¶–µ –¥—É–∂–µ –∫—Ä—É—Ç–æ üòé",
    "–•–∞-—Ö–∞-—Ö–∞. –ù–∞—Ä–µ—à—Ç—ñ..... —Ç–∏ –¥—É–º–∞–≤(–ª–∞) —è —Ç–µ–±–µ –Ω–µ –∑–Ω–∞–π–¥—É, {}?"
]

def get_main_menu_keyboard(is_participant=False, event_state=None):
    if event_state == "main_task" and is_participant:
        buttons = [
            [KeyboardButton(text="üö© CTF –∑–∞–≤–¥–∞–Ω–Ω—è"), KeyboardButton(text="–ú–æ—è –∫–æ–º–∞–Ω–¥–∞ ü´±üèª‚Äçü´≤üèø")]
        ]
    else:
        buttons = [
            [KeyboardButton(text="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ CTF üö©"), KeyboardButton(text="–•—Ç–æ —Ç–∞–∫—ñ BEST Lviv‚ùì")],
            [KeyboardButton(text="–ú–æ—è –∫–æ–º–∞–Ω–¥–∞ ü´±üèª‚Äçü´≤üèø")]
        ]
    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_unregistered_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å —É CTF-2025! üìù")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_universities_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=uni) for uni in UNIVERSITIES[i:i + 2]] for i in range(0, len(UNIVERSITIES), 2)],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_courses_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=course) for course in COURSES[i:i + 2]] for i in range(0, len(COURSES), 2)],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_source_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="Instagram"), KeyboardButton(text="LinkedIn")],
            [KeyboardButton(text="TikTok"), KeyboardButton(text="–î—Ä—É–∑—ñ")],
            [KeyboardButton(text="–ü—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É"), KeyboardButton(text="–ñ–∏–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è/—ñ–Ω—Ñ–æ—Å—Ç—ñ–π–∫–∏")],
            [KeyboardButton(text="–Ü–Ω—à–µ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_contact_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º üì±", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_check_data_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ")],
            [KeyboardButton(text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_consent_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü–æ–≥–æ–¥–∂—É—é—Å—å")],
            [KeyboardButton(text="‚ùå –í—ñ–¥–º–æ–≤–ª—è—é—Å—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

async def send_main_menu(message: types.Message, state: FSMContext, db: Database, registered: bool = False, name: str = None):
    user_id = message.from_user.id
    event_state = db.get_event_state()
    if event_state == "finished":
        await message.answer(
            "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç–∞ –∑–º–∞–≥–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω—ñ. –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å! üö©\n–ß–µ–∫–∞—î–º–æ –≤–∞—Å –Ω–∞ BEST CTF 2026! üòé",
            reply_markup=None
        )
        await state.clear()
        return

    if registered:
        participant = db.participants.find_one({"user_id": user_id})
        is_participant = False
        if participant and participant.get("team_id"):
            team_status = db.get_team_status(participant["team_id"])
            is_participant = team_status["is_participant"]
            if event_state in ["test_task", "main_task"] and not team_status["test_task_status"]:
                await message.answer(
                    "–®–∫–æ–¥–∞, –∞–ª–µ –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞ –Ω–∞ –∑–º–∞–≥–∞–Ω–Ω—è. üò¢\n"
                    "–ù–µ –ø–µ—Ä–µ–π–º–∞–π—Ç–µ—Å—è, –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∫—É —Ç–∞–∫–æ–∂ –±—É–¥–µ CTF! üö©\n"
                    "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –¥—É–∂–µ –≤–¥—è—á–Ω–∞, —â–æ —Å–∞–º–µ –≤–∏ –∑–∞—Ö–æ—Ç—ñ–ª–∏ –±—É—Ç–∏ —á–∞—Å—Ç–∏–Ω–æ—é –Ω–∞—à–æ–≥–æ —ñ–≤–µ–Ω—Ç—É! üôå",
                    reply_markup=get_main_menu_keyboard(is_participant=False, event_state=event_state)
                )
                await state.clear()
                return

        keyboard = get_main_menu_keyboard(is_participant, event_state)
        if is_participant:
            if event_state == "main_task":
                await message.answer(
                    "–¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à:\n"
                    " ‚úÖ –í–∏–∫–æ–Ω–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–µ CTF –∑–∞–≤–¥–∞–Ω–Ω—è\n"
                    " ‚úÖ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É\n\n"
                    "–Ø–∫—â–æ —Ö–æ—á–µ—à –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ —ñ–Ω—à–∏–º–∏ —É—á–∞—Å–Ω–∏–∫–∞–º–∏ ‚Äî –ø—ñ—Ä–Ω–∞–π —É <a href=\"https://t.me/+6RoHfTot8jdkYzAy\">–ß–∞—Ç —É—á–∞—Å–Ω–∏–∫—ñ–≤</a>.",
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    "–¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à:\n"
                    " ‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–∏\n"
                    " ‚úÖ –î—ñ–∑–Ω–∞—Ç–∏—Å—å —É—Å–µ –ø—Ä–æ –ø–æ–¥—ñ—é ‚ÑπÔ∏è\n\n"
                    "–Ø–∫—â–æ —Ö–æ—á–µ—à –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ —Ç–∏–º–∏, —Ö—Ç–æ –≤–∂–µ –ø—Ä–æ–π—à–æ–≤ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –ø—ñ—Ä–Ω–∞–π —É <a href=\"https://t.me/+6RoHfTot8jdkYzAy\">–ß–∞—Ç —É—á–∞—Å–Ω–∏–∫—ñ–≤</a>.",
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
        else:
            await message.answer(
                "–¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à:\n"
                " ‚úÖ –£–≤—ñ–π—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—É —á–∏ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤–æ—é\n"
                " ‚úÖ –î—ñ–∑–Ω–∞—Ç–∏—Å—å —É—Å–µ –ø—Ä–æ –ø–æ–¥—ñ—é ‚ÑπÔ∏è\n\n"
                "–Ø–∫—â–æ –Ω–µ –º–∞—î—à –∫–æ–º–∞–Ω–¥–∏, –∑ —è–∫–æ—é —Ö–æ—á–µ—à –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å ‚Äî –ø—ñ—Ä–Ω–∞–π —É <a href=\"https://t.me/+naYHbnNbN-9mYTFi\">–ó–Ω–∞–π–¥–∏ –∫–æ–º–∞–Ω–¥—É</a>.",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        await message.answer(random.choice(MAIN_MENU_MESSAGES))
    else:
        if event_state != "registration":
            await message.answer(
                "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥—è–∫—É—î–º–æ –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å! –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∫—É. üö©",
                reply_markup=None
            )
        else:
            await message.answer(
                "üö© –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ CTF-2025! üö©\n"
                "  –ù–µ–º–∞—î —á–∞—Å—É –∑–≤–æ–ª—ñ–∫–∞—Ç–∏. –î—ñ–π! ‚ö°Ô∏è\n"
                "  –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è —è–∫ —É—á–∞—Å–Ω–∏–∫, –∞ –ø–æ—Ç—ñ–º —Å—Ç–≤–æ—Ä–∏ –∞–±–æ –ø—Ä–∏—î–¥–Ω–∞–π—Å—è –¥–æ –∫–æ–º–∞–Ω–¥–∏! ü§ù",
                reply_markup=get_unregistered_keyboard()
            )
    await state.clear()

def register_user_handlers(dp: Dispatcher, db: Database, bot: Bot):
    register_team_handlers(dp, db, bot)
    register_info_ctf_handlers(dp, db, bot)
    register_info_best_handlers(dp, db, bot)

    @dp.message(CommandStart())
    async def start_command(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        await state.clear()  
        if db.is_user_registered(user_id):
            name = db.get_user_data(user_id)
            await send_main_menu(message, state, db, registered=True, name=name)
        else:
            await send_main_menu(message, state, db)

    @dp.message(lambda message: message.text == "üö© CTF –∑–∞–≤–¥–∞–Ω–Ω—è" and db.get_event_state() == "main_task")
    async def process_main_task(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        event_state = db.get_event_state()
        logger.info(f"process_main_task called for user {user_id}, event_state={event_state}")
        participant = db.participants.find_one({"user_id": user_id})
        if not participant or not participant.get("team_id"):
            await message.answer(
                "–í–∏ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥—ñ! –ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –¥–æ –∫–æ–º–∞–Ω–¥–∏, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ CTF –∑–∞–≤–¥–∞–Ω–Ω—è. üö©",
                reply_markup=get_main_menu_keyboard(is_participant=False, event_state=event_state)
            )
            return
        team_status = db.get_team_status(participant["team_id"])
        if not team_status["is_participant"] or not team_status["test_task_status"]:
            await message.answer(
                "–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —â–µ –Ω–µ –ø—Ä–æ–π—à–ª–∞ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è. –ó–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ CTF –∑–∞–≤–¥–∞–Ω–Ω—è! üö©",
                reply_markup=get_main_menu_keyboard(is_participant=False, event_state=event_state)
            )
            return
        pdf_path = os.path.join(config.ASSETS_PATH, "main_task.pdf")
        if not os.path.exists(pdf_path):
            logger.error(f"PDF file not found at {pdf_path}")
            await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª main_task.pdf –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—ñ–≤!")
        else:
            try:
                document = FSInputFile(path=pdf_path)
                await message.answer_document(document=document, caption="üö© –û—Å–Ω–æ–≤–Ω–µ CTF –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏!")
            except Exception as e:
                logger.error(f"Failed to send main_task.pdf: {str(e)}")
                await message.answer(f"‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–∞–π–ª—É: {str(e)}. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—ñ–≤!")
        await message.answer(
            "–¶–µ –≤–∞—à–µ –æ—Å–Ω–æ–≤–Ω–µ CTF –∑–∞–≤–¥–∞–Ω–Ω—è! –í–∏–∫–æ–Ω–∞–π—Ç–µ –π–æ–≥–æ —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞–º.",
            reply_markup=get_main_menu_keyboard(is_participant=True, event_state=event_state)
        )

    @dp.message(lambda message: message.text == "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å —É CTF-2025! üìù")
    async def process_register(message: types.Message, state: FSMContext):
        if db.get_event_state() != "registration":
            await message.answer(
                "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥—è–∫—É—î–º–æ –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å! –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∫—É. üö©",
                reply_markup=None
            )
            return
        if db.is_user_registered(message.from_user.id):
            name = db.get_user_data(message.from_user.id)
            await send_main_menu(message, state, db, registered=True, name=name)
            return
        image_path = os.path.join(config.ASSETS_PATH, "register.png")
        if not os.path.exists(image_path):
            logger.error(f"Image file not found at {image_path}")
            await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è register.png –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é!")
        else:
            try:
                photo = FSInputFile(path=image_path)
                await message.answer_photo(photo=photo, caption="üö© –ü–æ—á–∏–Ω–∞—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –≤ CTF-2025! üö©")
            except Exception as e:
                logger.error(f"Failed to send register.png: {str(e)}")
                await message.answer(f"‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é!")
        await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è:")
        await state.set_state(Registration.name)

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, Registration.name)
    async def process_invalid_media_name(message: types.Message, state: FSMContext):
        await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è:\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç! –ù–µ —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.")
        return

    @dp.message(Registration.name)
    async def process_name(message: types.Message, state: FSMContext):
        if not message.text:
            await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è:\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç! –ù–µ —Ñ–æ—Ç–æ, –≥—ñ—Ñ–∫–∏, —Å—Ç—ñ–∫–µ—Ä–∏ —á–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
            return
        name = message.text.strip()
        if not (name.replace(" ", "").isalpha() and len(name.replace(" ", "")) >= 2):
            await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è:\n‚ÄºÔ∏è –£–ø—Å, —è –Ω–µ –¥—É–º–∞—é, —â–æ —Ç–≤–æ—î —ñ–º‚Äô—è - –Ω–∞–±—ñ—Ä —Ü–∏—Ñ—Ä —á–∏ –æ–¥–Ω–æ–±—É–∫–≤–µ–Ω–∏–π –Ω—ñ–∫. üòè –°–ø—Ä–æ–±—É–π —â–µ!")
            return
        await state.update_data(name=name)
        await message.answer(COMPLIMENTS[-1].format(name) if random.random() > 0.2 else random.choice(COMPLIMENTS[:-1]))
        await message.answer("–ü—Ä–æ —Ç–∞–∫–µ –Ω–µ –¥—É–∂–µ –≥–∞—Ä–Ω–æ –ø–∏—Ç–∞—Ç–∏, –∞–ª–µ –≤—Å–µ –∂ üòÖ \n‚ô¶Ô∏è –°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤? :")
        await state.set_state(Registration.age)

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, Registration.age)
    async def process_invalid_media_age(message: types.Message, state: FSMContext):
        await message.answer("‚ô¶Ô∏è –°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤? :\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç! –ù–µ —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.")
        return

    @dp.message(Registration.age)
    async def process_age(message: types.Message, state: FSMContext):
        if not message.text:
            await message.answer("‚ô¶Ô∏è –°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤? :\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç! –ù–µ —Ñ–æ—Ç–æ, –≥—ñ—Ñ–∫–∏, —Å—Ç—ñ–∫–µ—Ä–∏ —á–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
            return
        age_text = message.text.strip()
        if not age_text.isdigit() or not 16 <= int(age_text) <= 50:
            await message.answer("‚ô¶Ô∏è –°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤? :\n‚ÄºÔ∏è –£–ø—Å, –≤—ñ–∫ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º –≤—ñ–¥ 16 üòÑ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ üòè:")
            return
        await state.update_data(age=int(age_text))
        await message.answer(f"{age_text} - –ø–æ–≤–∞–∂–Ω–∞ —Ü–∏—Ñ—Ä–∞ üßê. –°–∫–æ—Ä–æ –∑ —Ç–æ–±–æ—é –ø—ñ–¥–µ–º–æ –Ω–∞ –ø–µ–Ω—Å—ñ—é")
        await message.answer("üìå –ú–∞–π –Ω–∞ —É–≤–∞–∑—ñ, —É—á–∞—Å—Ç—å —É –Ω–∞—à–∏—Ö –∑–º–∞–≥–∞–Ω–Ω—è—Ö –º–æ–∂—É—Ç—å –±—Ä–∞—Ç–∏ –ª–∏—à–µ –ø–æ—Ç–æ—á–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∏.\n\n")
        await message.answer("‚ô¶Ô∏è –í–∏–±–µ—Ä–∏ —Å–≤—ñ–π —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç üéì –∞–±–æ –≤–≤–µ–¥–∏ –≤–ª–∞—Å–Ω–∏–π:", reply_markup=get_universities_keyboard())
        await state.set_state(Registration.university)

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, Registration.university)
    async def process_invalid_media_university(message: types.Message, state: FSMContext):
        await message.answer("‚ô¶Ô∏è –í–∏–±–µ—Ä–∏ —Å–≤—ñ–π —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç üéì –∞–±–æ –≤–≤–µ–¥–∏ –≤–ª–∞—Å–Ω–∏–π:\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.", reply_markup=get_universities_keyboard())
        return

    @dp.message(Registration.university)
    async def process_university(message: types.Message, state: FSMContext):
        if not message.text:
            await message.answer("‚ô¶Ô∏è –í–∏–±–µ—Ä–∏ —Å–≤—ñ–π —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç üéì –∞–±–æ –≤–≤–µ–¥–∏ –≤–ª–∞—Å–Ω–∏–π:\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç —ñ–∑ –∫–Ω–æ–ø–æ–∫ –∞–±–æ –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç!", reply_markup=get_universities_keyboard())
            return
        if message.text == "–Ü–Ω—à–∏–π":
            await message.answer("–û–≥–æ, —Ç–∏ –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –º—ñ—Å—Ü—è! üòÑ –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É:")
            await state.set_state(Registration.new_university)
        else:
            university = message.text.replace("üéì ", "") if message.text in UNIVERSITIES else message.text.strip()
            if len(university) < 2:
                await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É (–Ω–µ –º–µ–Ω—à–µ 2 —Å–∏–º–≤–æ–ª—ñ–≤)! üòÖ")
                return
            await state.update_data(university=university)
            logger.info(f"User {message.from_user.id} selected university: {university}")
            await message.answer(f"–î—è–∫—É—é! –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∞ —Ç–≤—ñ–π —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç: {university} üéì")
            await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ —Å–≤–æ—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å:")
            await state.set_state(Registration.specialty)

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, Registration.new_university)
    async def process_invalid_media_new_university(message: types.Message, state: FSMContext):
        await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É:\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç! –ù–µ —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.")
        return

    @dp.message(Registration.new_university)
    async def process_new_university(message: types.Message, state: FSMContext):
        if not message.text:
            await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É:\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç! –ù–µ —Ñ–æ—Ç–æ, –≥—ñ—Ñ–∫–∏, —Å—Ç—ñ–∫–µ—Ä–∏ —á–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
            return
        custom_university = message.text.strip()
        if len(custom_university) < 2:
            await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É:\n‚ÄºÔ∏è –£–ø—Å, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É (–Ω–µ –º–µ–Ω—à–µ 2 —Å–∏–º–≤–æ–ª—ñ–≤)! üòÖ")
            return
        await state.update_data(university=custom_university)
        logger.info(f"User {message.from_user.id} entered custom university: {custom_university}")
        await message.answer(f"–î—è–∫—É—é! –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∞ —Ç–≤—ñ–π —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç: {custom_university} üéì")
        await message.answer("üìå –ó–Ω–æ–≤—É –Ω–∞–≥–∞–¥—É—é, —É—á–∞—Å—Ç—å –º–æ–∂—É—Ç—å –±—Ä–∞—Ç–∏ –ª–∏—à–µ –ø–æ—Ç–æ—á–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∏ –∑–∞–∫–ª–∞–¥—É –≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏")
        await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ —Å–≤–æ—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å:")
        await state.set_state(Registration.specialty)

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, Registration.specialty)
    async def process_invalid_media_specialty(message: types.Message, state: FSMContext):
        await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ —Å–≤–æ—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å:\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç! –ù–µ —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.")
        return

    @dp.message(Registration.specialty)
    async def process_specialty(message: types.Message, state: FSMContext):
        if not message.text:
            await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ —Å–≤–æ—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å:\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç! –ù–µ —Ñ–æ—Ç–æ, –≥—ñ—Ñ–∫–∏, —Å—Ç—ñ–∫–µ—Ä–∏ —á–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
            return
        specialty = message.text.strip()
        if len(specialty) < 2:
            await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ —Å–≤–æ—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å:\n‚ÄºÔ∏è –£–ø—Å, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ (–Ω–µ –º–µ–Ω—à–µ 2 —Å–∏–º–≤–æ–ª—ñ–≤). üòè –°–ø—Ä–æ–±—É–π —â–µ!")
            return
        await state.update_data(specialty=specialty)
        await message.answer("–¢—ñ–ª—å–∫–∏ —á–µ—Å–Ω–æ, —Å–∞–º –∑–∞—Ö–æ—Ç—ñ–≤, —á–∏ –±–∞—Ç—å–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏? üòÆ‚Äçüí®")
        await message.answer("‚ô¶Ô∏è –í–∏–±–µ—Ä–∏ —Å–≤—ñ–π –∫—É—Ä—Å ü§ì:", reply_markup=get_courses_keyboard())
        await state.set_state(Registration.course)

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, Registration.course)
    async def process_invalid_media_course(message: types.Message, state: FSMContext):
        await message.answer("‚ô¶Ô∏è –í–∏–±–µ—Ä–∏ —Å–≤—ñ–π –∫—É—Ä—Å ü§ì:\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ –Ω–∞–¥—Å–∏–ª–∞–π —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.", reply_markup=get_courses_keyboard())
        return

    @dp.message(lambda message: message.text in COURSES, Registration.course)
    async def process_course(message: types.Message, state: FSMContext):
        await state.update_data(course=message.text)
        await message.answer("‚ô¶Ô∏è –ó–≤—ñ–¥–∫–∏ —Ç–∏ –¥—ñ–∑–Ω–∞–≤—Å—è(-–ª–∞—Å—å) –ø—Ä–æ –∑–º–∞–≥–∞–Ω–Ω—è? üì¢", reply_markup=get_source_keyboard())
        await state.set_state(Registration.source)

    @dp.message(Registration.course)
    async def process_invalid_course(message: types.Message, state: FSMContext):
        if not message.text:
            await message.answer("‚ô¶Ô∏è –í–∏–±–µ—Ä–∏ —Å–≤—ñ–π –∫—É—Ä—Å ü§ì:\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ –Ω–∞–¥—Å–∏–ª–∞–π —Ñ–æ—Ç–æ, –≥—ñ—Ñ–∫–∏, —Å—Ç—ñ–∫–µ—Ä–∏ —á–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", reply_markup=get_courses_keyboard())
            return
        await message.answer("‚ô¶Ô∏è –í–∏–±–µ—Ä–∏ —Å–≤—ñ–π –∫—É—Ä—Å ü§ì:\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∏–∂—á–µ:", reply_markup=get_courses_keyboard())

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, Registration.source)
    async def process_invalid_media_source(message: types.Message, state: FSMContext):
        await message.answer("‚ô¶Ô∏è –ó–≤—ñ–¥–∫–∏ —Ç–∏ –¥—ñ–∑–Ω–∞–≤—Å—è(-–ª–∞—Å—å) –ø—Ä–æ –∑–º–∞–≥–∞–Ω–Ω—è? üì¢\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ –Ω–∞–¥—Å–∏–ª–∞–π —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.", reply_markup=get_source_keyboard())
        return

    @dp.message(lambda message: message.text in ["Instagram", "LinkedIn", "TikTok", "–î—Ä—É–∑—ñ", "–ü—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É", "–ñ–∏–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è/—ñ–Ω—Ñ–æ—Å—Ç—ñ–π–∫–∏", "–Ü–Ω—à–µ"], Registration.source)
    async def process_source(message: types.Message, state: FSMContext):
        if message.text == "–Ü–Ω—à–µ":
            await message.answer("–û–≥–æ, —Ü—ñ–∫–∞–≤–æ! –í–≤–µ–¥–∏, –∑–≤—ñ–¥–∫–∏ —Å–∞–º–µ —Ç–∏ –¥—ñ–∑–Ω–∞–≤—Å—è(-–ª–∞—Å—å):")
            await state.set_state(Registration.custom_source)
        else:
            await state.update_data(source=message.text)
            await message.answer("–†–µ–∞–ª—å–Ω–æ?? –Ø —Ç–∞–∫ —Å–∞–º–æ! ü•≥")
            await message.answer("‚ô¶Ô∏è –ü–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º üì± (–Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ)", reply_markup=get_contact_keyboard())
            await state.set_state(Registration.contact)

    @dp.message(Registration.source)
    async def process_invalid_source(message: types.Message, state: FSMContext):
        if not message.text:
            await message.answer("‚ô¶Ô∏è –ó–≤—ñ–¥–∫–∏ —Ç–∏ –¥—ñ–∑–Ω–∞–≤—Å—è(-–ª–∞—Å—å) –ø—Ä–æ –∑–º–∞–≥–∞–Ω–Ω—è? üì¢\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ –Ω–∞–¥—Å–∏–ª–∞–π —Ñ–æ—Ç–æ, –≥—ñ—Ñ–∫–∏, —Å—Ç—ñ–∫–µ—Ä–∏ —á–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", reply_markup=get_source_keyboard())
            return
        await message.answer("‚ô¶Ô∏è –ó–≤—ñ–¥–∫–∏ —Ç–∏ –¥—ñ–∑–Ω–∞–≤—Å—è(-–ª–∞—Å—å) –ø—Ä–æ –∑–º–∞–≥–∞–Ω–Ω—è? üì¢\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∏–∂—á–µ:", reply_markup=get_source_keyboard())

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, Registration.custom_source)
    async def process_invalid_media_custom_source(message: types.Message, state: FSMContext):
        await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏, –∑–≤—ñ–¥–∫–∏ —Å–∞–º–µ —Ç–∏ –¥—ñ–∑–Ω–∞–≤—Å—è(-–ª–∞—Å—å):\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç! –ù–µ —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.")
        return

    @dp.message(Registration.custom_source)
    async def process_custom_source(message: types.Message, state: FSMContext):
        if not message.text:
            await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏, –∑–≤—ñ–¥–∫–∏ —Å–∞–º–µ —Ç–∏ –¥—ñ–∑–Ω–∞–≤—Å—è(-–ª–∞—Å—å):\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç! –ù–µ —Ñ–æ—Ç–æ, –≥—ñ—Ñ–∫–∏, —Å—Ç—ñ–∫–µ—Ä–∏ —á–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
            return
        custom_source = message.text.strip()
        if len(custom_source) < 2:
            await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏, –∑–≤—ñ–¥–∫–∏ —Å–∞–º–µ —Ç–∏ –¥—ñ–∑–Ω–∞–≤—Å—è(-–ª–∞—Å—å):\n‚ÄºÔ∏è –£–ø—Å, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–µ –¥–∂–µ—Ä–µ–ª–æ (–Ω–µ –º–µ–Ω—à–µ 2 —Å–∏–º–≤–æ–ª—ñ–≤)! üòÖ")
            return
        await state.update_data(source=custom_source)
        await message.answer("–ß—É–¥–æ–≤–æ, –¥–æ–¥–∞–ª–∞ –¥–∂–µ—Ä–µ–ª–æ! ü§ì")
        await message.answer("‚ô¶Ô∏è –ü–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º üì± (–Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ)", reply_markup=get_contact_keyboard())
        await state.set_state(Registration.contact)

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, Registration.contact)
    async def process_invalid_media_contact(message: types.Message, state: FSMContext):
        await message.answer("‚ô¶Ô∏è –ü–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º üì± (–Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ)\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ –Ω–∞–¥—Å–∏–ª–∞–π —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.", reply_markup=get_contact_keyboard())
        return

    @dp.message(Registration.contact)
    async def process_contact(message: types.Message, state: FSMContext):
        if message.contact:
            await state.update_data(phone=message.contact.phone_number)
            user_data = await state.get_data()
            user_id = message.from_user.id
            required_fields = ["name", "age", "university", "specialty", "course", "source", "phone"]
            if not all(field in user_data for field in required_fields):
                logger.error(f"Incomplete data for user {user_id}: {user_data}")
                await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –Ω–µ –≤—Å—ñ –¥–∞–Ω—ñ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ. –ü–æ—á–Ω—ñ–º–æ —Å–ø–æ—á–∞—Ç–∫—É!")
                await state.clear()
                await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è:")
                await state.set_state(Registration.name)
                return
            try:
                db.add_participant(
                    user_id,
                    user_data["name"],
                    user_data["age"],
                    user_data["university"],
                    user_data["specialty"],
                    user_data["course"],
                    user_data["source"],
                    user_data["phone"],
                    False,
                    None,
                    message.chat.id
                )
                logger.info(f"Added participant {user_id} to DB")
                await message.answer("‚ô¶Ô∏è –ü–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, –ø–µ—Ä–µ–≤—ñ—Ä, —á–∏ —Ç–∏ –¥–æ–±—Ä–µ –≤–≤—ñ–≤(-–µ–ª–∞) –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ. üòå", reply_markup=get_check_data_keyboard())
                await state.set_state(Registration.check_data)
            except Exception as e:
                logger.error(f"Failed to add participant {user_id}: {e}")
                await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
                await state.clear()
        else:
            if message.text:
                await message.answer("‚ô¶Ô∏è –ü–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º üì± (–Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ)\n‚ÄºÔ∏è –£–ø—Å, —Ü–µ —Ç–µ–∫—Å—Ç, –∞–ª–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º'!", reply_markup=get_contact_keyboard())
            else:
                await message.answer("‚ô¶Ô∏è –ü–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º üì± (–Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ)\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ –Ω–∞–¥—Å–∏–ª–∞–π —Ñ–æ—Ç–æ, –≥—ñ—Ñ–∫–∏, —Å—Ç—ñ–∫–µ—Ä–∏ —á–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", reply_markup=get_contact_keyboard())

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, Registration.check_data)
    async def process_invalid_media_check_data(message: types.Message, state: FSMContext):
        await message.answer("‚ô¶Ô∏è –ü–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, –ø–µ—Ä–µ–≤—ñ—Ä, —á–∏ —Ç–∏ –¥–æ–±—Ä–µ –≤–≤—ñ–≤(-–µ–ª–∞) –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ. üòå\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ –Ω–∞–¥—Å–∏–ª–∞–π —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.", reply_markup=get_check_data_keyboard())
        return

    @dp.message(lambda message: message.text in ["–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå"], Registration.check_data)
    async def process_check_data(message: types.Message, state: FSMContext):
        if message.text == "–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ":
            await message.answer("–ß—É–¥–æ–≤–æ! üòä –¢–µ–ø–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏ –∑–≥–æ–¥—É –Ω–∞ –æ–±—Ä–æ–±–∫—É –¥–∞–Ω–∏—Ö:", reply_markup=get_consent_keyboard())
            await state.set_state(Registration.data_consent)
        else:
            await state.clear()
            await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è:")
            await state.set_state(Registration.name)

    @dp.message(Registration.check_data)
    async def process_invalid_check_data(message: types.Message, state: FSMContext):
        if not message.text:
            await message.answer("‚ô¶Ô∏è –ü–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, –ø–µ—Ä–µ–≤—ñ—Ä, —á–∏ —Ç–∏ –¥–æ–±—Ä–µ –≤–≤—ñ–≤(-–µ–ª–∞) –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ. üòå\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ –Ω–∞–¥—Å–∏–ª–∞–π —Ñ–æ—Ç–æ, –≥—ñ—Ñ–∫–∏, —Å—Ç—ñ–∫–µ—Ä–∏ —á–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", reply_markup=get_check_data_keyboard())
            return
        await message.answer("‚ô¶Ô∏è –ü–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, –ø–µ—Ä–µ–≤—ñ—Ä, —á–∏ —Ç–∏ –¥–æ–±—Ä–µ –≤–≤—ñ–≤(-–µ–ª–∞) –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ. üòå\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ:", reply_markup=get_check_data_keyboard())

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, Registration.data_consent)
    async def process_invalid_media_consent(message: types.Message, state: FSMContext):
        await message.answer("‚ô¶Ô∏è –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏ –∑–≥–æ–¥—É –Ω–∞ –æ–±—Ä–æ–±–∫—É –¥–∞–Ω–∏—Ö:\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ –Ω–∞–¥—Å–∏–ª–∞–π —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.", reply_markup=get_consent_keyboard())
        return

    @dp.message(lambda message: message.text in ["‚úÖ –ü–æ–≥–æ–¥–∂—É—é—Å—å", "‚ùå –í—ñ–¥–º–æ–≤–ª—è—é—Å—å"], Registration.data_consent)
    async def process_data_consent(message: types.Message, state: FSMContext):
        if message.text == "‚úÖ –ü–æ–≥–æ–¥–∂—É—é—Å—å":
            user_id = message.from_user.id
            await state.update_data(data_consent=True)
            try:
                db.participants.update_one({"user_id": user_id}, {"$set": {"data_consent": True}})
                logger.info(f"Updated data_consent for user {user_id}")
            except Exception as e:
                logger.error(f"Failed to update data_consent for user {user_id}: {e}")
                await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–≥–æ–¥–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
                await state.clear()
                return
            await message.answer("–ö—Ä—É—Ç–æ! –ö–æ–ª–∏ –±—É–¥—É –≥–æ—Ç—É–≤–∞—Ç–∏ –∞—Ç–∞–∫—É –Ω–∞ –ø–µ–Ω—Ç–∞–≥–æ–Ω, –±—É–¥—É –∑–Ω–∞—Ç–∏, –∫—É–¥–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏üòè")
            await send_main_menu(message, state, db, registered=True, name=(await state.get_data())["name"])
        else:
            await message.answer(
                "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–±–∏—Ä–∞—î –æ—Å–æ–±–∏—Å—Ç—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —É—á–∞—Å–Ω–∏–∫—ñ–≤ –ª–∏—à–µ –∑–∞–¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥—ñ—ó ü•π\n"
                "–ë—É–¥–µ–º–æ –±–µ–∑–º–µ–∂–Ω–æ –≤–¥—è—á–Ω—ñ, —è–∫—â–æ –æ–±–µ—Ä–µ—à '‚úÖ –ü–æ–≥–æ–¥–∂—É—é—Å—å'! üòå",
                reply_markup=get_consent_keyboard()
            )

    @dp.message(Registration.data_consent)
    async def process_invalid_consent(message: types.Message, state: FSMContext):
        if not message.text:
            await message.answer("‚ô¶Ô∏è –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏ –∑–≥–æ–¥—É –Ω–∞ –æ–±—Ä–æ–±–∫—É –¥–∞–Ω–∏—Ö:\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ –Ω–∞–¥—Å–∏–ª–∞–π —Ñ–æ—Ç–æ, –≥—ñ—Ñ–∫–∏, —Å—Ç—ñ–∫–µ—Ä–∏ —á–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", reply_markup=get_consent_keyboard())
            return
        await message.answer("‚ô¶Ô∏è –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏ –∑–≥–æ–¥—É –Ω–∞ –æ–±—Ä–æ–±–∫—É –¥–∞–Ω–∏—Ö:\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ:", reply_markup=get_consent_keyboard())

    @dp.message(lambda message: message.text == "–©–µ —Ä–∞–∑ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è üìù")
    async def process_re_register(message: types.Message, state: FSMContext):
        if db.get_event_state() != "registration":
            await message.answer(
                "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥—è–∫—É—î–º–æ –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å! –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∫—É. üö©",
                reply_markup=None
            )
            return
        await state.clear()
        await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è:")
        await state.set_state(Registration.name)

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation)
    async def process_invalid_media_main(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        if db.is_user_registered(user_id):
            name = db.get_user_data(user_id)
            await message.answer("‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.")
            await send_main_menu(message, state, db, registered=True, name=name)
        else:
            await message.answer("‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.")
            await send_main_menu(message, state, db)

    @dp.message(lambda message: message.text not in ["–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ CTF üö©", "–•—Ç–æ —Ç–∞–∫—ñ BEST Lviv‚ùì", "–ú–æ—è –∫–æ–º–∞–Ω–¥–∞ ü´±üèª‚Äçü´≤üèø", "üö© CTF –∑–∞–≤–¥–∞–Ω–Ω—è"])
    async def process_invalid_info_response(message: types.Message, state: FSMContext):
        if not message.text:
            await message.answer("‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ –Ω–∞–¥—Å–∏–ª–∞–π —Ñ–æ—Ç–æ, –≥—ñ—Ñ–∫–∏, —Å—Ç—ñ–∫–µ—Ä–∏ —á–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", reply_markup=get_main_menu_keyboard())
            return
        user_id = message.from_user.id
        if db.is_user_registered(user_id):
            name = db.get_user_data(user_id)
            await send_main_menu(message, state, db, registered=True, name=name)
        else:
            await send_main_menu(message, state, db)

    @dp.message(lambda message: message.text not in ["–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ CTF üö©", "–•—Ç–æ —Ç–∞–∫—ñ BEST Lviv‚ùì", "–ú–æ—è –∫–æ–º–∞–Ω–¥–∞ ü´±üèª‚Äçü´≤üèø", "üö© CTF –∑–∞–≤–¥–∞–Ω–Ω—è"] and db.is_user_registered(message.from_user.id))
    async def process_invalid_main_menu(message: types.Message, state: FSMContext):
        if not message.text:
            name = db.get_user_data(message.from_user.id)
            await message.answer("‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ –Ω–∞–¥—Å–∏–ª–∞–π —Ñ–æ—Ç–æ, –≥—ñ—Ñ–∫–∏, —Å—Ç—ñ–∫–µ—Ä–∏ —á–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
            await send_main_menu(message, state, db, registered=True, name=name)
            return
        name = db.get_user_data(message.from_user.id)
        await send_main_menu(message, state, db, registered=True, name=name)

    @dp.message(lambda message: message.text != "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å —É CTF-2025! üìù" and not db.is_user_registered(message.from_user.id))
    async def process_invalid_start(message: types.Message, state: FSMContext):
        if not message.text:
            await message.answer("‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ –Ω–∞–¥—Å–∏–ª–∞–π —Ñ–æ—Ç–æ, –≥—ñ—Ñ–∫–∏, —Å—Ç—ñ–∫–µ—Ä–∏ —á–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        await send_main_menu(message, state, db)