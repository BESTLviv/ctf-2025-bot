import logging
from aiogram import Dispatcher, types
from aiogram.fsm.context import FSMContext
from states.team import TeamMenu
from database import Database

logger = logging.getLogger(__name__)

def get_cv_menu_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="ü´∂üèª –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–æ–≤–µ CV")],
            [types.KeyboardButton(text="üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ—î CV")],
            [types.KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_back_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

async def get_team_info(db: Database, user_id: int):
    try:
        participant = db.participants.find_one({"user_id": user_id})
        if participant and participant.get("team_id"):
            team = db.teams.find_one({"_id": participant["team_id"]})
            if team:
                team_name = team["team_name"]
                members = team["members"]
                member_names = [member["name"] for member_id in members if (member := db.participants.find_one({"user_id": member_id}))]
                member_list = ", ".join(member_names) if member_names else "–¢—ñ–ª—å–∫–∏ —Ç–∏"
                return f"–¢–≤–æ—è –∫–æ–º–∞–Ω–¥–∞: {team_name}\n–£—á–∞—Å–Ω–∏–∫–∏: {len(members)}/4\n–°–∫–ª–∞–¥: {member_list}"
        return None
    except Exception as e:
        logger.error(f"Error fetching team info for user {user_id}: {e}")
        return None

def register_cv_handlers(dp: Dispatcher, db, bot):
    from handlers.team_handlers import get_main_menu_keyboard, get_team_menu_keyboard

    @dp.message(lambda message: message.text == "üèÜ –ú–æ—î CV", TeamMenu.main)
    async def process_cv_menu(message: types.Message, state: FSMContext):
        await message.answer(
            "–¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –±–æ –¢–≤–æ—î —Ä–µ–∑—é–º–µ –ø–æ–±–∞—á–∞—Ç—å –∫—Ä—É—Ç—ñ –∫–æ–º–ø–∞–Ω—ñ—ó. –¢–æ–º—É —Ü–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ —è–∫—É—Å—å —Ü—ñ–∫–∞–≤—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é, —è–∫–∞ –∑–º—ñ–Ω–∏—Ç—å —Ç–≤–æ—î –∂–∏—Ç—Ç—è üòâ",
            reply_markup=get_cv_menu_keyboard()
        )
        await state.set_state(TeamMenu.cv_menu)

    @dp.message(lambda message: message.text == "ü´∂üèª –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–æ–≤–µ CV", TeamMenu.cv_menu)
    async def process_upload_cv(message: types.Message, state: FSMContext):
        await state.update_data(is_cv_saved=False)
        await message.answer(
            "–ó–∞–≤–∞–Ω—Ç–∞–∂ —Å–≤–æ—î CV —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF (–º–∞–∫—Å–∏–º—É–º 20 –ú–ë). üòÑ",
            reply_markup=get_back_keyboard()
        )
        await state.set_state(TeamMenu.upload_cv)

    @dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥", TeamMenu.upload_cv)
    async def process_back_from_upload_cv(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        user_data = await state.get_data()
        is_cv_saved = user_data.get("is_cv_saved", False)
        if not is_cv_saved:
            await message.answer("–§–∞–π–ª –Ω–µ –±—É–ª–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
        await message.answer(
            "–¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –±–æ –¢–≤–æ—î —Ä–µ–∑—é–º–µ –ø–æ–±–∞—á–∞—Ç—å –∫—Ä—É—Ç—ñ –∫–æ–º–ø–∞–Ω—ñ—ó. –¢–æ–º—É —Ü–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ —è–∫—É—Å—å —Ü—ñ–∫–∞–≤—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é, —è–∫–∞ –∑–º—ñ–Ω–∏—Ç—å —Ç–≤–æ—î –∂–∏—Ç—Ç—è üòâ",
            reply_markup=get_cv_menu_keyboard()
        )
        await state.set_state(TeamMenu.cv_menu)

    @dp.message(TeamMenu.upload_cv)
    async def process_cv_file(message: types.Message, state: FSMContext, bot):
        user_id = message.from_user.id
        if not message.document:
            await state.update_data(is_cv_saved=False)
            await message.answer("‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂ —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF!", reply_markup=get_back_keyboard())
            return
        if message.document.mime_type != "application/pdf":
            await state.update_data(is_cv_saved=False)
            await message.answer("‚ÄºÔ∏è –§–∞–π–ª –º–∞—î –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF!", reply_markup=get_back_keyboard())
            return
        if message.document.file_size > 20 * 1024 * 1024:
            await state.update_data(is_cv_saved=False)
            await message.answer("‚ÄºÔ∏è –§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä ‚Äî 20 –ú–ë. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!", reply_markup=get_back_keyboard())
            return

        try:
            db.save_cv(user_id, message.document.file_id, message.document.file_name)
            await state.update_data(is_cv_saved=True)
            await message.answer(
                "–û—á–º–∞–Ω—ñ—Ç–∏üò≥! –¢–≤–æ—î CV —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ! –¢–∏ –∞–±–æ —Ç—Ä—ñ—à–∫–∏ –ø–µ—Ä–µ–±—ñ–ª—å—à—É—î—à —Å–≤–æ—ó —É–º—ñ–Ω–Ω—è, –∞–±–æ –¥–µ—Å—å –∑ –¥–µ—Å—è—Ç–∏ —Ä–æ–∫—ñ–≤ –°—ñ–Ω—å–π–æ—Ä –º–∞–π—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç—É –∑ —É—Å—ñ—Ö –≤–∏–¥—ñ–≤ –∑–ª–∞–º—ñ–≤",
                reply_markup=get_cv_menu_keyboard()
            )
            await state.set_state(TeamMenu.cv_menu)
        except Exception as e:
            logger.error(f"Error saving CV for user {user_id}: {e}")
            await state.update_data(is_cv_saved=False)
            await message.answer(
                "‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ CV. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!",
                reply_markup=get_cv_menu_keyboard()
            )
            await state.set_state(TeamMenu.cv_menu)

    @dp.message(lambda message: message.text == "üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ—î CV", TeamMenu.cv_menu)
    async def process_view_cv(message: types.Message, bot):
        user_id = message.from_user.id
        try:
            cv_data = db.get_cv(user_id)
            if cv_data:
                file_name = cv_data.get("file_name", "cv.pdf")
                await message.answer("–¢–∞–º –≤—Å–µ —á–æ—Ç—ñ–Ω—å–∫–æ, —è –ø–µ—Ä–µ–≤—ñ—Ä–∏–ª–∞. –û—Å—å —Ç–≤–æ—î –æ—Å—Ç–∞–Ω–Ω—î CV! ‚ù§Ô∏è‚Äçüî•")
                await bot.send_document(
                    chat_id=message.chat.id,
                    document=cv_data["file_id"],
                    caption="–û—Å—å —Ç–≤–æ—î CV!",
                    reply_markup=get_cv_menu_keyboard()
                )
            else:
                await message.answer(
                    "–£–ø—Å, –∑–¥–∞—î—Ç—å—Å—è, —Ç–∏ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞–≤(-–ª–∞) CV! üòÖ –°–ø—Ä–æ–±—É–π –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–æ–≤–µ.",
                    reply_markup=get_cv_menu_keyboard()
                )
        except Exception as e:
            logger.error(f"Error retrieving CV for user {user_id}: {e}")
            await message.answer(
                "‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ CV. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!",
                reply_markup=get_cv_menu_keyboard()
            )

    @dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥", TeamMenu.cv_menu)
    async def process_back_to_team_menu(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        team_info = await get_team_info(db, user_id)
        if team_info:
            await message.answer(team_info, reply_markup=get_team_menu_keyboard())
            await state.set_state(TeamMenu.main)
        else:
            await message.answer(
                "‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!",
                reply_markup=get_main_menu_keyboard()
            )
            await state.clear()