import logging
import os
from aiogram import Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from states.team import TeamCreation, TeamJoin, TeamMenu, TeamLeaveConfirm
from database import Database
from handlers.cv_handlers import register_cv_handlers
import config

logger = logging.getLogger(__name__)

def get_main_menu_keyboard(is_participant=False, event_state=None):
    if event_state == "main_task" and is_participant:
        buttons = [
            [KeyboardButton(text="CTF –∑–∞–≤–¥–∞–Ω–Ω—è üö©"), KeyboardButton(text="–ú–æ—è –∫–æ–º–∞–Ω–¥–∞ ü´±üèª‚Äçü´≤üèø")]
        ]
    else:
        buttons = [
            [KeyboardButton(text="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ CTF üö©"), KeyboardButton(text="–•—Ç–æ —Ç–∞–∫—ñ BEST Lviv‚ùì")],
            [KeyboardButton(text="–ú–æ—è –∫–æ–º–∞–Ω–¥–∞ ü´±üèª‚Äçü´≤üèø")]
        ]
    logger.info(f"get_main_menu_keyboard called with is_participant={is_participant}, event_state={event_state}")
    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_main_menu_message(is_participant=False, event_state=None):
    if is_participant:
        if event_state == "main_task":
            return (
                "–¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à:\n"
                " ‚úÖ –í–∏–∫–æ–Ω–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–µ CTF –∑–∞–≤–¥–∞–Ω–Ω—è\n"
                " ‚úÖ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É\n\n"
                "–Ø–∫—â–æ —Ö–æ—á–µ—à –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ —ñ–Ω—à–∏–º–∏ —É—á–∞—Å–Ω–∏–∫–∞–º–∏ ‚Äî –ø—ñ—Ä–Ω–∞–π —É <a href=\"https://t.me/+6RoHfTot8jdkYzAy\">–ß–∞—Ç —É—á–∞—Å–Ω–∏–∫—ñ–≤</a>."
            )
        return (
            "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é! üòä\n"
            "–¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à:\n"
            " ‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–∏\n"
            " ‚úÖ –î—ñ–∑–Ω–∞—Ç–∏—Å—å —É—Å–µ –ø—Ä–æ –ø–æ–¥—ñ—é ‚ÑπÔ∏è\n\n"
            "–Ø–∫—â–æ —Ö–æ—á–µ—à –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ —Ç–∏–º–∏, —Ö—Ç–æ –≤–∂–µ –ø—Ä–æ–π—à–æ–≤ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –ø—ñ—Ä–Ω–∞–π —É <a href=\"https://t.me/+6RoHfTot8jdkYzAy\">–ß–∞—Ç —É—á–∞—Å–Ω–∏–∫—ñ–≤</a>."
        )
    return (
        "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é! üòä\n"
        "–¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à:\n"
        " ‚úÖ –£–≤—ñ–π—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—É —á–∏ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤–æ—é\n"
        " ‚úÖ –î—ñ–∑–Ω–∞—Ç–∏—Å—å —É—Å–µ –ø—Ä–æ –ø–æ–¥—ñ—é ‚ÑπÔ∏è\n\n"
        "–Ø–∫—â–æ –Ω–µ –º–∞—î—à –∫–æ–º–∞–Ω–¥–∏, –∑ —è–∫–æ—é —Ö–æ—á–µ—à –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å ‚Äî –ø—ñ—Ä–Ω–∞–π —É <a href=\"https://t.me/+naYHbnNbN-9mYTFi\">–ó–Ω–∞–π–¥–∏ –∫–æ–º–∞–Ω–¥—É</a>."
    )

def get_team_menu_keyboard(is_participant=False, test_task_status=False, event_state=None):
    logger.info(f"get_team_menu_keyboard called with is_participant={is_participant}, test_task_status={test_task_status}, event_state={event_state}")
    buttons = []
    if event_state == "main_task" and is_participant and test_task_status:
        buttons.append([KeyboardButton(text="üèÜ –ú–æ—î CV")])
    else:
        buttons.append([KeyboardButton(text="üß™ –¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è")])
        buttons.append([KeyboardButton(text="üèÜ –ú–æ—î CV")])
        buttons.append([KeyboardButton(text="üö™ –ü–æ–∫–∏–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥—É")])
    buttons.append([KeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_leave_confirm_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–¢–∞–∫, –≤–ø–µ–≤–Ω–µ–Ω–∏–π(-–∞) ‚úÖ")],
            [KeyboardButton(text="–ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏—Å—å ‚ùå")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

async def get_team_info(db: Database, user_id: int):
    try:
        participant = db.participants.find_one({"user_id": user_id})
        if participant and participant.get("team_id"):
            team = db.teams.find_one({"_id": participant["team_id"]})
            if team:
                team_name = team["team_name"]
                members = team["members"]
                member_names = [member["name"] for member_id in members if (member := db.participants.find_one({"user_id": member_id}))]
                member_list = ", ".join(member_names) if member_names else "–¢—ñ–ª—å–∫–∏ —Ç–∏"
                return f"–¢–≤–æ—è –∫–æ–º–∞–Ω–¥–∞: {team_name}\n–£—á–∞—Å–Ω–∏–∫–∏: {len(members)}/4\n–°–∫–ª–∞–¥: {member_list}", team
        return None, None
    except Exception as e:
        logger.error(f"Error fetching team info for user {user_id}: {e}")
        return None, None

async def send_main_menu(message: types.Message, state: FSMContext, db: Database, error_message: str = None):
    user_id = message.from_user.id
    event_state = db.get_event_state()
    logger.info(f"send_main_menu called with event_state={event_state}, user_id={user_id}")
    if event_state == "finished":
        await message.answer(
            "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç–∞ –∑–º–∞–≥–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω—ñ. –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å! üö©\n–ß–µ–∫–∞—î–º–æ –≤–∞—Å –Ω–∞ BEST CTF 2026! üòé",
            reply_markup=None
        )
        await state.clear()
        return

    participant = db.participants.find_one({"user_id": user_id})
    is_participant = False
    if participant and participant.get("team_id"):
        team_status = db.get_team_status(participant["team_id"])
        logger.info(f"Team status for user {user_id}: {team_status}")
        is_participant = team_status["is_participant"]
        if event_state in ["test_task", "main_task"] and not team_status["test_task_status"]:
            await message.answer(
                "–®–∫–æ–¥–∞, –∞–ª–µ –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞ –Ω–∞ –∑–º–∞–≥–∞–Ω–Ω—è. üò¢\n"
                "–ù–µ –ø–µ—Ä–µ–π–º–∞–π—Ç–µ—Å—è, –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∫—É —Ç–∞–∫–æ–∂ –±—É–¥–µ CTF! üö©\n"
                "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –¥—É–∂–µ –≤–¥—è—á–Ω–∞, —â–æ —Å–∞–º–µ –≤–∏ –∑–∞—Ö–æ—Ç—ñ–ª–∏ –±—É—Ç–∏ —á–∞—Å—Ç–∏–Ω–æ—é –Ω–∞—à–æ–≥–æ —ñ–≤–µ–Ω—Ç—É! üôå",
                reply_markup=get_main_menu_keyboard(is_participant=False, event_state=event_state)
            )
            await state.clear()
            return

    if error_message:
        await message.answer(error_message, reply_markup=get_main_menu_keyboard(is_participant, event_state), parse_mode="HTML")
    else:
        await message.answer(get_main_menu_message(is_participant, event_state), reply_markup=get_main_menu_keyboard(is_participant, event_state), parse_mode="HTML")
    await state.clear()

def get_team_creation_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_confirm_data_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ")],
            [KeyboardButton(text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def register_team_handlers(dp: Dispatcher, db: Database, bot):
    register_cv_handlers(dp, db, bot)

    @dp.message(lambda message: message.text == "–ú–æ—è –∫–æ–º–∞–Ω–¥–∞ ü´±üèª‚Äçü´≤üèø" and db.is_user_registered(message.from_user.id))
    async def process_team(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        event_state = db.get_event_state()
        logger.info(f"process_team called for user {user_id}, event_state={event_state}")
        if event_state == "finished":
            await message.answer(
                "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç–∞ –∑–º–∞–≥–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω—ñ. –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å! üö©\n–ß–µ–∫–∞—î–º–æ –≤–∞—Å –Ω–∞ BEST CTF 2026! üòé",
                reply_markup=None
            )
            await state.clear()
            return

        team_info, team = await get_team_info(db, user_id)
        if team_info:
            team_status = db.get_team_status(team["_id"])
            logger.info(f"Team status in process_team: {team_status}")
            if event_state in ["test_task", "main_task"] and not team_status["test_task_status"]:
                await message.answer(
                    "–®–∫–æ–¥–∞, –∞–ª–µ –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞ –Ω–∞ –∑–º–∞–≥–∞–Ω–Ω—è. üò¢\n"
                    "–ù–µ –ø–µ—Ä–µ–π–º–∞–π—Ç–µ—Å—è, –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∫—É —Ç–∞–∫–æ–∂ –±—É–¥–µ CTF! üö©\n"
                    "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –¥—É–∂–µ –≤–¥—è—á–Ω–∞, —â–æ —Å–∞–º–µ –≤–∏ –∑–∞—Ö–æ—Ç—ñ–ª–∏ –±—É—Ç–∏ —á–∞—Å—Ç–∏–Ω–æ—é –Ω–∞—à–æ–≥–æ —ñ–≤–µ–Ω—Ç—É! üôå",
                    reply_markup=get_main_menu_keyboard(is_participant=False, event_state=event_state)
                )
                await state.clear()
                return
            await message.answer(team_info, reply_markup=get_team_menu_keyboard(team_status["is_participant"], team_status["test_task_status"], event_state))
            await state.set_state(TeamMenu.main)
        else:
            if event_state != "registration":
                await message.answer(
                    "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥—è–∫—É—î–º–æ –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å! –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∫—É. üö©",
                    reply_markup=get_main_menu_keyboard(is_participant=False, event_state=event_state)
                )
                await state.clear()
                return
            image_path = os.path.join(config.ASSETS_PATH, "findTeam.png")
            if not os.path.exists(image_path):
                logger.error(f"Image file not found at {image_path}")
                await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è findTeam.png –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
            else:
                try:
                    photo = FSInputFile(path=image_path)
                    await message.answer_photo(photo=photo, caption="ü§ù –ó–Ω–∞–π–¥–∏ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è BEST CTF-2025!")
                except Exception as e:
                    logger.error(f"Failed to send findTeam.png: {str(e)}")
                    await message.answer(f"‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")

            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üëâ –ß–∞—Ç —É—á–∞—Å–Ω–∏–∫—ñ–≤ üí≠")],
                    [KeyboardButton(text="–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É ü´±üèª‚Äçü´≤üèø")],
                    [KeyboardButton(text="–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –∫–æ–º–∞–Ω–¥–∏ üë•")],
                    [KeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            await message.answer(
                "‚ùå –¢–∏ –ø–æ–∫–∏ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥—ñ.\n\n"
                "–ê–ª–µ —Ü–µ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ, –∞–¥–∂–µ —É –Ω–∞—Å —î —á–∞—Ç <a href=\"https://t.me/+naYHbnNbN-9mYTFi\">–ó–Ω–∞–π–¥–∏ –∫–æ–º–∞–Ω–¥—É</a>, –¥–µ –º–æ–∂–Ω–∞ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å —ñ–∑ —Ç–∏–º–∏, —Ö—Ç–æ —Ç–∞–∫ —Å–∞–º–æ —à—É–∫–∞—î —Å–æ–±—ñ –º–µ–π—Ç—ñ–≤, "
                "–≤—Å–µ —â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ü–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç —ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–∏—Å—å! –•—Ç–æ –∑–Ω–∞—î, –º–æ–∂–µ —Å–∞–º–µ –∑ —Ü–∏–º–∏ –ª—é–¥—å–º–∏ "
                "–≤–∏ –∑—ñ–π–¥–µ—Ç–µ –Ω–∞ –ø‚Äô—î–¥–µ—Å—Ç–∞–ª! ü§ù\n\n"
                "–ê–±–æ –∂ —Å—Ç–≤–æ—Ä–∏ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É —ñ –∑–∞–ø—Ä–æ—Å–∏ —ñ–Ω—à–∏—Ö –≥–µ—Ä–æ—ó–≤ –ø—Ä–æ—Å—Ç–æ –∑–∞—Ä–∞–∑:",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await state.clear()

    @dp.message(lambda message: message.text == "üëâ –ß–∞—Ç —É—á–∞—Å–Ω–∏–∫—ñ–≤ üí≠")
    async def process_chat_link(message: types.Message):
        image_path = os.path.join(config.ASSETS_PATH, "chat.png")
        if not os.path.exists(image_path):
            logger.error(f"Image file not found at {image_path}")
            await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è chat.png –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
        else:
            try:
                photo = FSInputFile(path=image_path)
                await message.answer_photo(photo=photo, caption="üí≠ –ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ —á–∞—Ç—É!")
            except Exception as e:
                logger.error(f"Failed to send chat.png: {str(e)}")
                await message.answer(f"‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
        
        await message.answer(
            f"–ü–µ—Ä–µ—Ö–æ–¥—å —É <a href=\"https://t.me/+naYHbnNbN-9mYTFi\">–ó–Ω–∞–π–¥–∏ –∫–æ–º–∞–Ω–¥—É</a>! ü§ù",
            reply_markup=get_main_menu_keyboard(is_participant=False, event_state=db.get_event_state()),
            parse_mode="HTML"
        )

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, lambda message: message.text == "üëâ –ß–∞—Ç —É—á–∞—Å–Ω–∏–∫—ñ–≤ üí≠")
    async def process_invalid_media_chat_link(message: types.Message):
        image_path = os.path.join(config.ASSETS_PATH, "chat.png")
        if not os.path.exists(image_path):
            logger.error(f"Image file not found at {image_path}")
            await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è chat.png –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
        else:
            try:
                photo = FSInputFile(path=image_path)
                await message.answer_photo(photo=photo, caption="üí≠ –ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ —á–∞—Ç—É!")
            except Exception as e:
                logger.error(f"Failed to send chat.png: {str(e)}")
                await message.answer(f"‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
        await message.answer(
            "‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ."
        )
        await message.answer(
            f"–ü–µ—Ä–µ—Ö–æ–¥—å —É <a href=\"https://t.me/+naYHbnNbN-9mYTFi\">–ó–Ω–∞–π–¥–∏ –∫–æ–º–∞–Ω–¥—É</a>! ü§ù",
            reply_markup=get_main_menu_keyboard(is_participant=False, event_state=db.get_event_state()),
            parse_mode="HTML"
        )

    @dp.message(lambda message: message.text == "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É ü´±üèª‚Äçü´≤üèø")
    async def process_create_team(message: types.Message, state: FSMContext):
        if db.get_event_state() != "registration":
            await message.answer(
                "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥—è–∫—É—î–º–æ –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å! –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∫—É. üö©",
                reply_markup=get_main_menu_keyboard(is_participant=False, event_state=db.get_event_state())
            )
            await state.clear()
            return
        if db.is_user_in_team(message.from_user.id):
            await message.answer(
                "–¢–∏ –≤–∂–µ –≤ –∫–æ–º–∞–Ω–¥—ñ! –°–ø–æ—á–∞—Ç–∫—É –ø–æ–∫–∏–Ω—å –ø–æ—Ç–æ—á–Ω—É –∫–æ–º–∞–Ω–¥—É, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É.",
                reply_markup=get_main_menu_keyboard(is_participant=False, event_state=db.get_event_state())
            )
            return
        await message.answer("–ö—Ä—É—Ç–æ! –î–∞–≤–∞–π —É –∫—ñ–ª—å–∫–∞ –Ω–∞—Ç–∏—Å–∫—ñ–≤ –ø–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ —Å—Ç–≤–æ—Ä–∏–º–æ –º—ñ—Å—Ü–µ, –¥–µ –∑–±–∏—Ä–∞—é—Ç—å—Å—è —Å–∏–ª—å–Ω—ñüí™\n\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏:", reply_markup=get_team_creation_keyboard())
        await state.set_state(TeamCreation.team_name)

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, TeamCreation.team_name)
    async def process_invalid_media_team_name(message: types.Message, state: FSMContext):
        await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏:\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç! –ù–µ —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.", reply_markup=get_team_creation_keyboard())
        return

    @dp.message(TeamCreation.team_name)
    async def process_team_name(message: types.Message, state: FSMContext):
        if message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é":
            await send_main_menu(message, state, db)
            return
        team_name = message.text.strip()
        if len(team_name) < 2:
            await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏:\n‚ÄºÔ∏è –ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Å–∏–º–≤–æ–ª–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!", reply_markup=get_team_creation_keyboard())
            return
        if db.teams.find_one({"team_name": team_name}):
            await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏:\n‚ÄºÔ∏è –¶—è –Ω–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏ –≤–∂–µ –∑–∞–π–Ω—è—Ç–∞. –í–∏–±–µ—Ä–∏ —ñ–Ω—à—É!", reply_markup=get_team_creation_keyboard())
            return
        await state.update_data(team_name=team_name)
        await message.answer("–í–∏–≥–∞–¥–∞–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–∞–Ω–¥–∏. –ó–Ω–∞—é, —Ü–µ —Å–∫–ª–∞–¥–Ω–æ, –∞–ª–µ –≤–æ–Ω–æ —Ç–æ—á–Ω–æ —Ç–æ–≥–æ –≤–∞—Ä—Ç–µ! üîí", reply_markup=get_team_creation_keyboard())
        await state.set_state(TeamCreation.team_password)

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, TeamCreation.team_password)
    async def process_invalid_media_team_password(message: types.Message, state: FSMContext):
        await message.answer("‚ô¶Ô∏è –í–∏–≥–∞–¥–∞–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–∞–Ω–¥–∏. –ó–Ω–∞—é, —Ü–µ —Å–∫–ª–∞–¥–Ω–æ, –∞–ª–µ –≤–æ–Ω–æ —Ç–æ—á–Ω–æ —Ç–æ–≥–æ –≤–∞—Ä—Ç–µ! üîí\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç! –ù–µ —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.", reply_markup=get_team_creation_keyboard())
        return

    @dp.message(TeamCreation.team_password)
    async def process_team_password(message: types.Message, state: FSMContext):
        if message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é":
            await send_main_menu(message, state, db)
            return
        password = message.text.strip()
        if len(password) < 4:
            await message.answer("‚ô¶Ô∏è –í–∏–≥–∞–¥–∞–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–∞–Ω–¥–∏. –ó–Ω–∞—é, —Ü–µ —Å–∫–ª–∞–¥–Ω–æ, –∞–ª–µ –≤–æ–Ω–æ —Ç–æ—á–Ω–æ —Ç–æ–≥–æ –≤–∞—Ä—Ç–µ! üîí\n‚ÄºÔ∏è –ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 4 —Å–∏–º–≤–æ–ª–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!", reply_markup=get_team_creation_keyboard())
            return
        await state.update_data(team_password=password)
        user_data = await state.get_data()
        await message.answer(
            f"–ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –¥–∞–Ω—ñ:\n–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏: {user_data['team_name']}\n–ü–∞—Ä–æ–ª—å: {password}",
            reply_markup=get_confirm_data_keyboard()
        )
        await state.set_state(TeamCreation.confirm_data)

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, TeamCreation.confirm_data)
    async def process_invalid_media_confirm_data(message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        await message.answer(
            f"–ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –¥–∞–Ω—ñ:\n–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏: {user_data['team_name']}\n–ü–∞—Ä–æ–ª—å: {user_data['team_password']}\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ –Ω–∞–¥—Å–∏–ª–∞–π —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.",
            reply_markup=get_confirm_data_keyboard()
        )
        return

    @dp.message(lambda message: message.text in ["–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå"], TeamCreation.confirm_data)
    async def process_confirm_data(message: types.Message, state: FSMContext):
        if message.text == "–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ":
            user_id = message.from_user.id
            user_data = await state.get_data()
            team_name = user_data["team_name"]
            password = user_data["team_password"]
            try:
                team_id, success = db.add_team(team_name, user_id, password)
                if success:
                    db.participants.update_one({"user_id": user_id}, {"$set": {"team_id": team_id}})
                    team_info, team = await get_team_info(db, user_id)
                    await message.answer(
                        f"–í—ñ—Ç–∞—é! –¢–∏ —Å—Ç–≤–æ—Ä–∏–≤(-–ª–∞) –∫–æ–º–∞–Ω–¥—É *{team_name}*!\n{team_info.split('\n', 1)[1] if team_info and '\n' in team_info else '–¢–∏ —î–¥–∏–Ω–∏–π —É—á–∞—Å–Ω–∏–∫ –Ω–∞—Ä–∞–∑—ñ!'}",
                        parse_mode="Markdown",
                        reply_markup=get_team_menu_keyboard(is_participant=False, test_task_status=False, event_state=db.get_event_state())
                    )
                    await state.set_state(TeamMenu.main)
                else:
                    await send_main_menu(message, state, db, "–¶–µ–π –ø–∞—Ä–æ–ª—å —É–∂–µ –∑–∞–π–Ω—è—Ç–∏–π, –¥–∞–≤–∞–π —ñ–Ω—à–∏–π üòú")
            except Exception as e:
                logger.error(f"Error creating team for user {user_id}: {e}")
                await send_main_menu(message, state, db, "‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        else:
            await message.answer("–î–æ–±—Ä–µ, –¥–∞–≤–∞–π —â–µ —Ä–∞–∑! –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏:", reply_markup=get_team_creation_keyboard())
            await state.set_state(TeamCreation.team_name)

    @dp.message(TeamCreation.confirm_data)
    async def process_invalid_confirm_data(message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        await message.answer(
            f"–ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –¥–∞–Ω—ñ:\n–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏: {user_data['team_name']}\n–ü–∞—Ä–æ–ª—å: {user_data['team_password']}\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∏–∂—á–µ!",
            reply_markup=get_confirm_data_keyboard()
        )

    @dp.message(lambda message: message.text == "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –∫–æ–º–∞–Ω–¥–∏ üë•")
    async def process_join_team(message: types.Message, state: FSMContext):
        if db.get_event_state() != "registration":
            await message.answer(
                "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥—è–∫—É—î–º–æ –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å! –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∫—É. üö©",
                reply_markup=get_main_menu_keyboard(is_participant=False, event_state=db.get_event_state())
            )
            await state.clear()
            return
        if db.is_user_in_team(message.from_user.id):
            await message.answer(
                "–¢–∏ –≤–∂–µ –≤ –∫–æ–º–∞–Ω–¥—ñ! –°–ø–æ—á–∞—Ç–∫—É –ø–æ–∫–∏–Ω—å –ø–æ—Ç–æ—á–Ω—É –∫–æ–º–∞–Ω–¥—É, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —ñ–Ω—à–æ—ó.",
                reply_markup=get_main_menu_keyboard(is_participant=False, event_state=db.get_event_state())
            )
            return
        await message.answer(
            "–ó—ñ–±—Ä–∞–≤—Å—è –∑ —Å–∏–ª–∞–º–∏? –ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ —Å–≤–æ—î—ó –∫–æ–º–∞–Ω–¥–∏! üí™\n\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏:",
            reply_markup=get_team_creation_keyboard()
        )
        await state.set_state(TeamJoin.team_name)

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, TeamJoin.team_name)
    async def process_invalid_media_join_team_name(message: types.Message, state: FSMContext):
        await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏:\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç! –ù–µ —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.", reply_markup=get_team_creation_keyboard())
        return

    @dp.message(TeamJoin.team_name)
    async def process_join_team_name(message: types.Message, state: FSMContext):
        if message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é":
            await send_main_menu(message, state, db)
            return
        team_name = message.text.strip()
        if not db.teams.find_one({"team_name": team_name}):
            await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏:\n‚ÄºÔ∏è –ö–æ–º–∞–Ω–¥–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ —ñ—Å–Ω—É—î. –ü–µ—Ä–µ–≤—ñ—Ä –Ω–∞–∑–≤—É —Ç–∞ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!", reply_markup=get_team_creation_keyboard())
            return
        await state.update_data(team_name=team_name)
        await message.answer(
            "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –∫–æ–º–∞–Ω–¥–∏. –¢–∏ –∂ –π–æ–≥–æ –∑–Ω–∞—î—à, –ø—Ä–∞–≤–¥–∞? üòÖ",
            reply_markup=get_team_creation_keyboard()
        )
        await state.set_state(TeamJoin.team_password)

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, TeamJoin.team_password)
    async def process_invalid_media_join_team_password(message: types.Message, state: FSMContext):
        await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –∫–æ–º–∞–Ω–¥–∏. –¢–∏ –∂ –π–æ–≥–æ –∑–Ω–∞—î—à, –ø—Ä–∞–≤–¥–∞? üòÖ\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç! –ù–µ —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.", reply_markup=get_team_creation_keyboard())
        return

    @dp.message(TeamJoin.team_password)
    async def process_join_team_password(message: types.Message, state: FSMContext):
        password = message.text.strip()
        user_id = message.from_user.id
        user_data = await state.get_data()
        team_name = user_data["team_name"]
        try:
            team_id, success = db.add_team(team_name, user_id, password)
            if success:
                db.participants.update_one({"user_id": user_id}, {"$set": {"team_id": team_id}})
                team_info, team = await get_team_info(db, user_id)
                new_member = db.participants.find_one({"user_id": user_id})
                new_member_name = new_member["name"] if new_member else "–ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫"
                await message.answer(
                    f"–í—ñ—Ç–∞—é, —Ç–µ–ø–µ—Ä —Ç–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ—î–¥–Ω–∞–≤—Å—è(-–ª–∞—Å—å) –¥–æ –∫–æ–º–∞–Ω–¥–∏ *{team_name}*!\n{team_info.split('\n', 1)[1] if team_info and '\n' in team_info else '–¢–∏ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –∫–æ–º–∞–Ω–¥–∏!'}",
                    parse_mode="Markdown",
                    reply_markup=get_team_menu_keyboard(is_participant=False, test_task_status=False, event_state=db.get_event_state())
                )
                await state.set_state(TeamMenu.main)
                for member_id, member in [(m_id, db.participants.find_one({"user_id": m_id})) for m_id in team["members"] if m_id != user_id]:
                    if member and "chat_id" in member:
                        try:
                            await bot.send_message(
                                chat_id=member["chat_id"],
                                text=f"–í—ñ—Ç–∞—é, –¥–æ –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏ *{team_name}* –¥–æ—î–¥–Ω–∞–≤—Å—è(-–ª–∞—Å—å) *{new_member_name}*! –Ø–∫—â–æ –≤–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, —Ö—Ç–æ —Ü–µ, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ {config.ORGANIZER_CONTACT}.",
                                parse_mode="Markdown"
                            )
                        except Exception as e:
                            logger.error(f"Error sending notification to user {member_id}: {e}")
                    else:
                        logger.warning(f"No chat_id found for user {member_id} in team {team_name}")
            else:
                await message.answer(
                    "‚ô¶Ô∏è –í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –∫–æ–º–∞–Ω–¥–∏. –¢–∏ –∂ –π–æ–≥–æ –∑–Ω–∞—î—à, –ø—Ä–∞–≤–¥–∞? üòÖ\n‚ÄºÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å –∞–±–æ –∫–æ–º–∞–Ω–¥–∞ –≤–∂–µ –ø–æ–≤–Ω–∞ (4 —É—á–∞—Å–Ω–∏–∫–∏). –ü–µ—Ä–µ–≤—ñ—Ä –¥–∞–Ω—ñ —Ç–∞ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!",
                    reply_markup=get_team_creation_keyboard()
                )
        except Exception as e:
            logger.error(f"Error joining team for user {user_id}: {e}")
            await message.answer(
                "‚ô¶Ô∏è –í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –∫–æ–º–∞–Ω–¥–∏. –¢–∏ –∂ –π–æ–≥–æ –∑–Ω–∞—î—à, –ø—Ä–∞–≤–¥–∞? üòÖ\n‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—ñ –¥–æ –∫–æ–º–∞–Ω–¥–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!",
                reply_markup=get_team_creation_keyboard()
            )

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, lambda message: message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    async def process_invalid_media_back_to_main_menu(message: types.Message, state: FSMContext):
        await message.answer("‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.")
        await send_main_menu(message, state, db)

    @dp.message(lambda message: message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    async def process_back_to_main_menu(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state in [TeamCreation.team_name, TeamCreation.team_password, TeamJoin.team_name, TeamJoin.team_password, TeamLeaveConfirm.first_confirm]:
            await send_main_menu(message, state, db)
        else:
            await send_main_menu(message, state, db)

    @dp.message(lambda message: message.text == "üß™ –¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è", TeamMenu.main)
    async def process_test_task(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        event_state = db.get_event_state()
        logger.info(f"process_test_task called for user {user_id}, event_state={event_state}")
        team_info, team = await get_team_info(db, user_id)
        if not team:
            await send_main_menu(message, state, db, "–í–∏ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥—ñ! –ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –¥–æ –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É.")
            return
        team_status = db.get_team_status(team["_id"])
        logger.info(f"Team status in process_test_task: {team_status}")
        if event_state == "registration":
            image_path = os.path.join(config.ASSETS_PATH, "test.png")
            if not os.path.exists(image_path):
                logger.error(f"Image file not found at {image_path}")
                await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è test.png –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
            else:
                try:
                    photo = FSInputFile(path=image_path)
                    await message.answer_photo(photo=photo, caption="üß™ –¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏!")
                except Exception as e:
                    logger.error(f"Failed to send test.png: {str(e)}")
                    await message.answer(f"‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
            await message.answer(
                "–ô–æ–π –π–æ–≥–æ –ø–æ–∫–∏ —Ç—É—Ç –Ω–µ–º–∞—îüò¢ –í–æ–Ω–æ –±—É–¥–µ 15-–≥–æ –ª–∏—Å—Ç–æ–ø–∞–¥–∞. –ó–∞—Ä—è–¥–∂–∞–π –Ω–æ—É—Ç, –∑–∞–≤–∞–Ω—Ç–∞–∂—É–π —É—Å—ñ —Å–ª–æ–≤–Ω–∏–∫–∏ —ñ –±—É–¥—å –≥–æ—Ç–æ–≤–∏–π –¥–æ –±–æ—éüî•\n"
                "‚ÄºÔ∏è –£–≤–∞–≥–∞ ‚ÄºÔ∏è: –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å –º–æ–∂—É—Ç—å –ª–∏—à–µ –∫–æ–º–∞–Ω–¥–∏, —É —è–∫–∏—Ö —î —â–æ–Ω–∞–π–º–µ–Ω—à–µ 3 —É—á–∞—Å–Ω–∏–∫–∏.",
                reply_markup=get_team_menu_keyboard(team_status["is_participant"], team_status["test_task_status"], event_state)
            )
        elif event_state == "test_task" and team_status["test_task_status"]:
            image_path = os.path.join(config.ASSETS_PATH, "test.png")
            if not os.path.exists(image_path):
                logger.error(f"Image file not found at {image_path}")
                await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è test.png –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
            else:
                try:
                    photo = FSInputFile(path=image_path)
                    await message.answer_photo(photo=photo, caption="üß™ –¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏!")
                except Exception as e:
                    logger.error(f"Failed to send test.png: {str(e)}")
                    await message.answer(f"‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
            pdf_path = os.path.join(config.ASSETS_PATH, "test_task.pdf")
            if not os.path.exists(pdf_path):
                logger.error(f"PDF file not found at {pdf_path}")
                await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª test_task.pdf –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
            else:
                try:
                    document = FSInputFile(path=pdf_path)
                    await message.answer_document(document=document, caption="üß™ –¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏!")
                except Exception as e:
                    logger.error(f"Failed to send test_task.pdf: {str(e)}")
                    await message.answer(f"‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–∞–π–ª—É: {str(e)}. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
            await message.answer(
                "–¶–µ –≤–∞—à–µ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è! üß™\n"
                "–í–∏–∫–æ–Ω–∞–π—Ç–µ –π–æ–≥–æ —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞–º.",
                reply_markup=get_team_menu_keyboard(team_status["is_participant"], team_status["test_task_status"], event_state)
            )
        else:
            await message.answer(
                "–¢–µ—Å—Ç–æ–≤–∏–π –µ—Ç–∞–ø —â–µ –Ω–µ —Ä–æ–∑–ø–æ—á–∞–≤—Å—è –∞–±–æ –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è. –°–ª—ñ–¥–∫—É–π –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏! üö©",
                reply_markup=get_team_menu_keyboard(team_status["is_participant"], team_status["test_task_status"], event_state)
            )

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, lambda message: message.text == "üß™ –¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è", TeamMenu.main)
    async def process_invalid_media_test_task(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        event_state = db.get_event_state()
        logger.info(f"process_invalid_media_test_task called for user {user_id}, event_state={event_state}")
        team_info, team = await get_team_info(db, user_id)
        if not team:
            await send_main_menu(message, state, db, "–í–∏ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥—ñ! –ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –¥–æ –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É.")
            return
        team_status = db.get_team_status(team["_id"])
        logger.info(f"Team status in process_invalid_media_test_task: {team_status}")
        await message.answer("‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.")
        if event_state == "registration":
            image_path = os.path.join(config.ASSETS_PATH, "test.png")
            if not os.path.exists(image_path):
                logger.error(f"Image file not found at {image_path}")
                await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è test.png –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
            else:
                try:
                    photo = FSInputFile(path=image_path)
                    await message.answer_photo(photo=photo, caption="üß™ –¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏!")
                except Exception as e:
                    logger.error(f"Failed to send test.png: {str(e)}")
                    await message.answer(f"‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
            await message.answer(
                "–ô–æ–π –π–æ–≥–æ –ø–æ–∫–∏ —Ç—É—Ç –Ω–µ–º–∞—îüò¢ –í–æ–Ω–æ –±—É–¥–µ 15-–≥–æ –ª–∏—Å—Ç–æ–ø–∞–¥–∞. –ó–∞—Ä—è–¥–∂–∞–π –Ω–æ—É—Ç, –∑–∞–≤–∞–Ω—Ç–∞–∂—É–π —É—Å—ñ —Å–ª–æ–≤–Ω–∏–∫–∏ —ñ –±—É–¥—å –≥–æ—Ç–æ–≤–∏–π –¥–æ –±–æ—éüî•\n"
                "‚ÄºÔ∏è –£–≤–∞–≥–∞ ‚ÄºÔ∏è: –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å –º–æ–∂—É—Ç—å –ª–∏—à–µ –∫–æ–º–∞–Ω–¥–∏, —É —è–∫–∏—Ö —î —â–æ–Ω–∞–π–º–µ–Ω—à–µ 3 —É—á–∞—Å–Ω–∏–∫–∏.",
                reply_markup=get_team_menu_keyboard(team_status["is_participant"], team_status["test_task_status"], event_state)
            )
        elif event_state == "test_task" and team_status["test_task_status"]:
            image_path = os.path.join(config.ASSETS_PATH, "test.png")
            if not os.path.exists(image_path):
                logger.error(f"Image file not found at {image_path}")
                await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è test.png –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
            else:
                try:
                    photo = FSInputFile(path=image_path)
                    await message.answer_photo(photo=photo, caption="üß™ –¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏!")
                except Exception as e:
                    logger.error(f"Failed to send test.png: {str(e)}")
                    await message.answer(f"‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
            pdf_path = os.path.join(config.ASSETS_PATH, "test_task.pdf")
            if not os.path.exists(pdf_path):
                logger.error(f"PDF file not found at {pdf_path}")
                await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª test_task.pdf –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
            else:
                try:
                    document = FSInputFile(path=pdf_path)
                    await message.answer_document(document=document, caption="üß™ –¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏!")
                except Exception as e:
                    logger.error(f"Failed to send test_task.pdf: {str(e)}")
                    await message.answer(f"‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–∞–π–ª—É: {str(e)}. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
            await message.answer(
                "–¶–µ –≤–∞—à–µ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è! üß™\n"
                "–í–∏–∫–æ–Ω–∞–π—Ç–µ –π–æ–≥–æ —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞–º.",
                reply_markup=get_team_menu_keyboard(team_status["is_participant"], team_status["test_task_status"], event_state)
            )
        else:
            await message.answer(
                "–¢–µ—Å—Ç–æ–≤–∏–π –µ—Ç–∞–ø —â–µ –Ω–µ —Ä–æ–∑–ø–æ—á–∞–≤—Å—è –∞–±–æ –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è. –°–ª—ñ–¥–∫—É–π –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏! üö©",
                reply_markup=get_team_menu_keyboard(team_status["is_participant"], team_status["test_task_status"], event_state)
            )

    @dp.message(lambda message: message.text == "üö© CTF –∑–∞–≤–¥–∞–Ω–Ω—è üö©", TeamMenu.main)
    async def process_main_task(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        event_state = db.get_event_state()
        logger.info(f"process_main_task called for user {user_id}, event_state={event_state}")
        team_info, team = await get_team_info(db, user_id)
        if not team:
            await send_main_menu(message, state, db, "–í–∏ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥—ñ! –ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –¥–æ –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É.")
            return
        team_status = db.get_team_status(team["_id"])
        logger.info(f"Team status in process_main_task: {team_status}")
        if not team_status["is_participant"] or not team_status["test_task_status"]:
            await message.answer(
                "–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —â–µ –Ω–µ –ø—Ä–æ–π—à–ª–∞ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è. –ó–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ CTF –∑–∞–≤–¥–∞–Ω–Ω—è! üö©",
                reply_markup=get_team_menu_keyboard(team_status["is_participant"], team_status["test_task_status"], event_state)
            )
            return
        if event_state != "main_task":
            await message.answer(
                "–û—Å–Ω–æ–≤–Ω–∏–π –µ—Ç–∞–ø CTF —â–µ –Ω–µ —Ä–æ–∑–ø–æ—á–∞–≤—Å—è –∞–±–æ –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è. –°–ª—ñ–¥–∫—É–π –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏! üö©",
                reply_markup=get_team_menu_keyboard(team_status["is_participant"], team_status["test_task_status"], event_state)
            )
            return
        pdf_path = os.path.join(config.ASSETS_PATH, "main_task.pdf")
        if not os.path.exists(pdf_path):
            logger.error(f"PDF file not found at {pdf_path}")
            await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª main_task.pdf –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—ñ–≤!")
        else:
            try:
                document = FSInputFile(path=pdf_path)
                await message.answer_document(document=document, caption="üö© –û—Å–Ω–æ–≤–Ω–µ CTF –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏!")
            except Exception as e:
                logger.error(f"Failed to send main_task.pdf: {str(e)}")
                await message.answer(f"‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–∞–π–ª—É: {str(e)}. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—ñ–≤!")
        await message.answer(
            "–¶–µ –≤–∞—à–µ –æ—Å–Ω–æ–≤–Ω–µ CTF –∑–∞–≤–¥–∞–Ω–Ω—è! –í–∏–∫–æ–Ω–∞–π—Ç–µ –π–æ–≥–æ —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞–º.",
            reply_markup=get_team_menu_keyboard(team_status["is_participant"], team_status["test_task_status"], event_state)
        )

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, lambda message: message.text == "üö© CTF –∑–∞–≤–¥–∞–Ω–Ω—è üö©", TeamMenu.main)
    async def process_invalid_media_main_task(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        event_state = db.get_event_state()
        logger.info(f"process_invalid_media_main_task called for user {user_id}, event_state={event_state}")
        team_info, team = await get_team_info(db, user_id)
        if not team:
            await send_main_menu(message, state, db, "–í–∏ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥—ñ! –ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –¥–æ –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É.")
            return
        team_status = db.get_team_status(team["_id"])
        logger.info(f"Team status in process_invalid_media_main_task: {team_status}")
        if not team_status["is_participant"] or not team_status["test_task_status"]:
            await message.answer(
                "–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —â–µ –Ω–µ –ø—Ä–æ–π—à–ª–∞ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è. –ó–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ CTF –∑–∞–≤–¥–∞–Ω–Ω—è! üö©",
                reply_markup=get_team_menu_keyboard(team_status["is_participant"], team_status["test_task_status"], event_state)
            )
            return
        if event_state != "main_task":
            await message.answer(
                "–û—Å–Ω–æ–≤–Ω–∏–π –µ—Ç–∞–ø CTF —â–µ –Ω–µ —Ä–æ–∑–ø–æ—á–∞–≤—Å—è –∞–±–æ –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è. –°–ª—ñ–¥–∫—É–π –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏! üö©",
                reply_markup=get_team_menu_keyboard(team_status["is_participant"], team_status["test_task_status"], event_state)
            )
            return
        await message.answer("‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.")
        pdf_path = os.path.join(config.ASSETS_PATH, "main_task.pdf")
        if not os.path.exists(pdf_path):
            logger.error(f"PDF file not found at {pdf_path}")
            await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª main_task.pdf –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—ñ–≤!")
        else:
            try:
                document = FSInputFile(path=pdf_path)
                await message.answer_document(document=document, caption="üö© –û—Å–Ω–æ–≤–Ω–µ CTF –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏!")
            except Exception as e:
                logger.error(f"Failed to send main_task.pdf: {str(e)}")
                await message.answer(f"‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–∞–π–ª—É: {str(e)}. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—ñ–≤!")
        await message.answer(
            "–¶–µ –≤–∞—à–µ –æ—Å–Ω–æ–≤–Ω–µ CTF –∑–∞–≤–¥–∞–Ω–Ω—è! –í–∏–∫–æ–Ω–∞–π—Ç–µ –π–æ–≥–æ —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞–º.",
            reply_markup=get_team_menu_keyboard(team_status["is_participant"], team_status["test_task_status"], event_state)
        )

    @dp.message(lambda message: message.text == "üö™ –ü–æ–∫–∏–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥—É", TeamMenu.main)
    async def process_leave_team(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        team_info, team = await get_team_info(db, user_id)
        if not team:
            await send_main_menu(message, state, db, "–í–∏ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥—ñ! –ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –¥–æ –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É.")
            return
        await message.answer(
            f"–¢–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–π(-–∞), —â–æ —Ö–æ—á–µ—à –ø–æ–∫–∏–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥—É *{team['team_name']}*? üòî",
            parse_mode="Markdown",
            reply_markup=get_leave_confirm_keyboard()
        )
        await state.set_state(TeamLeaveConfirm.first_confirm)

    @dp.message(lambda message: message.sticker or message.photo or message.video or message.animation, TeamLeaveConfirm.first_confirm)
    async def process_invalid_media_leave_confirm(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        team_info, team = await get_team_info(db, user_id)
        if not team:
            await send_main_menu(message, state, db, "–í–∏ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥—ñ! –ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –¥–æ –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É.")
            return
        await message.answer(
            f"‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏! –ù–µ –Ω–∞–¥—Å–∏–ª–∞–π —Å—Ç—ñ–∫–µ—Ä–∏, —Ñ–æ—Ç–æ, GIF —á–∏ –≤—ñ–¥–µ–æ.\n"
            f"–¢–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–π(-–∞), —â–æ —Ö–æ—á–µ—à –ø–æ–∫–∏–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥—É *{team['team_name']}*? üòî",
            parse_mode="Markdown",
            reply_markup=get_leave_confirm_keyboard()
        )

    @dp.message(lambda message: message.text in ["–¢–∞–∫, –≤–ø–µ–≤–Ω–µ–Ω–∏–π(-–∞) ‚úÖ", "–ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏—Å—å ‚ùå"], TeamLeaveConfirm.first_confirm)
    async def process_leave_confirm(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        team_info, team = await get_team_info(db, user_id)
        if not team:
            await send_main_menu(message, state, db, "–í–∏ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥—ñ! –ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –¥–æ –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É.")
            return
        if message.text == "–¢–∞–∫, –≤–ø–µ–≤–Ω–µ–Ω–∏–π(-–∞) ‚úÖ":
            try:
                success = db.leave_team(user_id)
                if success:
                    await message.answer(
                        f"–¢–∏ –ø–æ–∫–∏–Ω—É–≤(-–ª–∞) –∫–æ–º–∞–Ω–¥—É *{team['team_name']}*. üò¢\n"
                        "–ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, —Ç–∏ –º–æ–∂–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∞–±–æ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —ñ–Ω—à–æ—ó!",
                        parse_mode="Markdown",
                        reply_markup=get_main_menu_keyboard(is_participant=False, event_state=db.get_event_state())
                    )
                    for member_id, member in [(m_id, db.participants.find_one({"user_id": m_id})) for m_id in team["members"] if m_id != user_id]:
                        if member and "chat_id" in member:
                            try:
                                await bot.send_message(
                                    chat_id=member["chat_id"],
                                    text=f"–£—á–∞—Å–Ω–∏–∫ –∑–∞–ª–∏—à–∏–≤ –∫–æ–º–∞–Ω–¥—É *{team['team_name']}*. üòî",
                                    parse_mode="Markdown"
                                )
                            except Exception as e:
                                logger.error(f"Error sending notification to user {member_id}: {e}")
                    await state.clear()
                else:
                    await send_main_menu(message, state, db, "‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑ –∫–æ–º–∞–Ω–¥–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
            except Exception as e:
                logger.error(f"Error leaving team for user {user_id}: {e}")
                await send_main_menu(message, state, db, "‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑ –∫–æ–º–∞–Ω–¥–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        else:
            team_status = db.get_team_status(team["_id"])
            await message.answer(
                "–ß—É–¥–æ–≤–æ, —Ç–∏ –∑–∞–ª–∏—à–∏–≤—Å—è(-–ª–∞—Å—å) —É –∫–æ–º–∞–Ω–¥—ñ! üí™",
                reply_markup=get_team_menu_keyboard(is_participant=team_status["is_participant"], test_task_status=team_status["test_task_status"], event_state=db.get_event_state())
            )
            await state.set_state(TeamMenu.main)