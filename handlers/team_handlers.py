import logging
import os
from aiogram import Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from states.team import TeamCreation, TeamJoin, TeamMenu, TeamLeaveConfirm
from database import Database
from handlers.cv_handlers import register_cv_handlers, get_back_keyboard
import config

logger = logging.getLogger(__name__)

def get_main_menu_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ CTF üö©"), types.KeyboardButton(text="–•—Ç–æ —Ç–∞–∫—ñ BEST Lviv‚ùì")],
            [types.KeyboardButton(text="–ú–æ—è –∫–æ–º–∞–Ω–¥–∞ ü´±üèª‚Äçü´≤üèø")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_main_menu_message():
    return (
        "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é! üòä\n"
        "–¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à:\n"
        " ‚úÖ –£–≤—ñ–π—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—É —á–∏ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤–æ—é\n"
        " ‚úÖ –î—ñ–∑–Ω–∞—Ç–∏—Å—å —É—Å–µ –ø—Ä–æ –ø–æ–¥—ñ—é ‚ÑπÔ∏è\n"
        f"\n–Ø–∫—â–æ –Ω–µ –º–∞—î—à –∫–æ–º–∞–Ω–¥–∏, –∑ —è–∫–æ—é —Ö–æ—á–µ—à –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å ‚Äî –ø—ñ—Ä–Ω–∞–π —É —á–∞—Ç —É—á–∞—Å–Ω–∏–∫—ñ–≤ [{config.PARTICIPANTS_CHAT_LINK}]. –¢–∞–º –º–æ–∂–Ω–∞ –ª–µ–≥–∫–æ –∑–Ω–∞–π—Ç–∏ –æ–¥–Ω–æ–¥—É–º—Ü—ñ–≤! ü§ù\n\n"
        "–ô–æ-—Ö–æ-—Ö–æ! –Ü —Ñ–ª–∞–≥ —É –∫–∏—à–µ–Ω—é! –õ–µ—Ç‚Äôs –≥–æ—É! üö©"
    )

def get_team_menu_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üß™ –¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è")],
            [types.KeyboardButton(text="üèÜ –ú–æ—î CV")],
            [types.KeyboardButton(text="üö™ –ü–æ–∫–∏–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥—É")],
            [types.KeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_leave_confirm_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–¢–∞–∫, –≤–ø–µ–≤–Ω–µ–Ω–∏–π(-–∞) ‚úÖ")],
            [types.KeyboardButton(text="–ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏—Å—å ‚ùå")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

async def get_team_info(db: Database, user_id: int):
    try:
        participant = db.participants.find_one({"user_id": user_id})
        if participant and participant.get("team_id"):
            team = db.teams.find_one({"_id": participant["team_id"]})
            if team:
                team_name = team["team_name"]
                members = team["members"]
                member_names = [member["name"] for member_id in members if (member := db.participants.find_one({"user_id": member_id}))]
                member_list = ", ".join(member_names) if member_names else "–¢—ñ–ª—å–∫–∏ —Ç–∏"
                return f"–¢–≤–æ—è –∫–æ–º–∞–Ω–¥–∞: {team_name}\n–£—á–∞—Å–Ω–∏–∫–∏: {len(members)}/4\n–°–∫–ª–∞–¥: {member_list}", team
        return None, None
    except Exception as e:
        logger.error(f"Error fetching team info for user {user_id}: {e}")
        return None, None

async def send_main_menu(message: types.Message, state: FSMContext, error_message: str = None):
    if error_message:
        await message.answer(error_message, reply_markup=get_main_menu_keyboard())
    else:
        await message.answer(get_main_menu_message(), reply_markup=get_main_menu_keyboard())
    await state.clear()

def get_team_creation_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_confirm_data_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ")],
            [types.KeyboardButton(text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def register_team_handlers(dp: Dispatcher, db: Database, bot):
    register_cv_handlers(dp, db, bot)

    @dp.message(lambda message: message.text == "–ú–æ—è –∫–æ–º–∞–Ω–¥–∞ ü´±üèª‚Äçü´≤üèø" and db.is_user_registered(message.from_user.id))
    async def process_team(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        team_info, _ = await get_team_info(db, user_id)
        if team_info:
            await message.answer(team_info, reply_markup=get_team_menu_keyboard())
            await state.set_state(TeamMenu.main)
        else:
            image_path = os.path.join(config.ASSETS_PATH, "findTeam.png")
            if not os.path.exists(image_path):
                logger.error(f"Image file not found at {image_path}")
                await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è findTeam.png –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
            else:
                try:
                    photo = FSInputFile(path=image_path)
                    await message.answer_photo(photo=photo, caption="ü§ù –ó–Ω–∞–π–¥–∏ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è BEST CTF-2025!")
                except Exception as e:
                    logger.error(f"Failed to send findTeam.png: {str(e)}")
                    await message.answer(f"‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")

            keyboard = types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="üëâ –ß–∞—Ç —É—á–∞—Å–Ω–∏–∫—ñ–≤ üí≠")],
                    [types.KeyboardButton(text="–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É ü´±üèª‚Äçü´≤üèø")],
                    [types.KeyboardButton(text="–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –∫–æ–º–∞–Ω–¥–∏ üë•")],
                    [types.KeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            await message.answer(
                "‚ùå –¢–∏ –ø–æ–∫–∏ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥—ñ.\n\n"
                "–ê–ª–µ —Ü–µ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ, –∞–¥–∂–µ —É –Ω–∞—Å —î —á–∞—Ç –¥–ª—è —É—á–∞—Å–Ω–∏–∫—ñ–≤, —è–∫—ñ —Ç–∞–∫ —Å–∞–º–æ —à—É–∫–∞—é—Ç—å —Å–æ–±—ñ –º–µ–π—Ç—ñ–≤, "
                "–≤—Å–µ —â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ü–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç —ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–∏—Å—å! –•—Ç–æ –∑–Ω–∞—î, –º–æ–∂–µ —Å–∞–º–µ –∑ —Ü–∏–º–∏ –ª—é–¥—å–º–∏ "
                "–≤–∏ –∑—ñ–π–¥–µ—Ç–µ –Ω–∞ –ø‚Äô—î–¥–µ—Å—Ç–∞–ª! ü§ù\n\n"
                "–ê–±–æ –∂ —Å—Ç–≤–æ—Ä–∏ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É —ñ –∑–∞–ø—Ä–æ—Å–∏ —ñ–Ω—à–∏—Ö –≥–µ—Ä–æ—ó–≤ –ø—Ä–æ—Å—Ç–æ –∑–∞—Ä–∞–∑:",
                reply_markup=keyboard
            )
            await state.clear()

    @dp.message(lambda message: message.text == "üëâ –ß–∞—Ç —É—á–∞—Å–Ω–∏–∫—ñ–≤ üí≠")
    async def process_chat_link(message: types.Message):
        image_path = os.path.join(config.ASSETS_PATH, "chat.png")
        if not os.path.exists(image_path):
            logger.error(f"Image file not found at {image_path}")
            await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è chat.png –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
        else:
            try:
                photo = FSInputFile(path=image_path)
                await message.answer_photo(photo=photo, caption="üí≠ –ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ —á–∞—Ç—É —É—á–∞—Å–Ω–∏–∫—ñ–≤!")
            except Exception as e:
                logger.error(f"Failed to send chat.png: {str(e)}")
                await message.answer(f"‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
        
        await message.answer(
            f"–ü–µ—Ä–µ—Ö–æ–¥—å —É —á–∞—Ç —É—á–∞—Å–Ω–∏–∫—ñ–≤! ü§ù\n{config.PARTICIPANTS_CHAT_LINK}",
            reply_markup=get_main_menu_keyboard()
        )

    @dp.message(lambda message: message.text == "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É ü´±üèª‚Äçü´≤üèø")
    async def process_create_team(message: types.Message, state: FSMContext):
        if db.is_user_in_team(message.from_user.id):
            await message.answer(
                "–¢–∏ –≤–∂–µ –≤ –∫–æ–º–∞–Ω–¥—ñ! –°–ø–æ—á–∞—Ç–∫—É –ø–æ–∫–∏–Ω—å –ø–æ—Ç–æ—á–Ω—É –∫–æ–º–∞–Ω–¥—É, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        await message.answer("–ö—Ä—É—Ç–æ! –î–∞–≤–∞–π —É –∫—ñ–ª—å–∫–∞ –Ω–∞—Ç–∏—Å–∫—ñ–≤ –ø–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ —Å—Ç–≤–æ—Ä–∏–º–æ –º—ñ—Å—Ü–µ, –¥–µ –∑–±–∏—Ä–∞—é—Ç—å—Å—è —Å–∏–ª—å–Ω—ñüí™\n\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏:", reply_markup=get_team_creation_keyboard())
        await state.set_state(TeamCreation.team_name)

    @dp.message(TeamCreation.team_name)
    async def process_team_name(message: types.Message, state: FSMContext):
        if message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é":
            await send_main_menu(message, state)
            return
        team_name = message.text.strip()
        if len(team_name) < 2:
            await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏:\n‚ÄºÔ∏è –ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Å–∏–º–≤–æ–ª–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!", reply_markup=get_team_creation_keyboard())
            return
        if db.teams.find_one({"team_name": team_name}):
            await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏:\n‚ÄºÔ∏è –¶—è –Ω–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏ –≤–∂–µ –∑–∞–π–Ω—è—Ç–∞. –í–∏–±–µ—Ä–∏ —ñ–Ω—à—É!", reply_markup=get_team_creation_keyboard())
            return
        await state.update_data(team_name=team_name)
        await message.answer("–í–∏–≥–∞–¥–∞–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–∞–Ω–¥–∏. –ó–Ω–∞—é, —Ü–µ —Å–∫–ª–∞–¥–Ω–æ, –∞–ª–µ –≤–æ–Ω–æ —Ç–æ—á–Ω–æ —Ç–æ–≥–æ –≤–∞—Ä—Ç–µ! üîí", reply_markup=get_team_creation_keyboard())
        await state.set_state(TeamCreation.team_password)

    @dp.message(TeamCreation.team_password)
    async def process_team_password(message: types.Message, state: FSMContext):
        if message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é":
            await send_main_menu(message, state)
            return
        password = message.text.strip()
        if len(password) < 4:
            await message.answer("‚ô¶Ô∏è –í–∏–≥–∞–¥–∞–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–∞–Ω–¥–∏. –ó–Ω–∞—é, —Ü–µ —Å–∫–ª–∞–¥–Ω–æ, –∞–ª–µ –≤–æ–Ω–æ —Ç–æ—á–Ω–æ —Ç–æ–≥–æ –≤–∞—Ä—Ç–µ! üîí\n‚ÄºÔ∏è –ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 4 —Å–∏–º–≤–æ–ª–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!", reply_markup=get_team_creation_keyboard())
            return
        await state.update_data(team_password=password)
        user_data = await state.get_data()
        await message.answer(
            f"–ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –¥–∞–Ω—ñ:\n–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏: {user_data['team_name']}\n–ü–∞—Ä–æ–ª—å: {password}",
            reply_markup=get_confirm_data_keyboard()
        )
        await state.set_state(TeamCreation.confirm_data)

    @dp.message(lambda message: message.text in ["–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå"], TeamCreation.confirm_data)
    async def process_confirm_data(message: types.Message, state: FSMContext):
        if message.text == "–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ":
            user_id = message.from_user.id
            user_data = await state.get_data()
            team_name = user_data["team_name"]
            password = user_data["team_password"]
            try:
                team_id, success = db.add_team(team_name, user_id, password)
                if success:
                    db.participants.update_one({"user_id": user_id}, {"$set": {"team_id": team_id}})
                    team_info, team = await get_team_info(db, user_id)
                    await message.answer(
                        f"–í—ñ—Ç–∞—é! –¢–∏ —Å—Ç–≤–æ—Ä–∏–≤(-–ª–∞) –∫–æ–º–∞–Ω–¥—É *{team_name}*!\n{team_info.split('\n', 1)[1] if team_info and '\n' in team_info else '–¢–∏ —î–¥–∏–Ω–∏–π —É—á–∞—Å–Ω–∏–∫ –Ω–∞—Ä–∞–∑—ñ!'}",
                        parse_mode="Markdown",
                        reply_markup=get_team_menu_keyboard()
                    )
                    await state.set_state(TeamMenu.main)
                else:
                    await send_main_menu(message, state, "–¶–µ–π –ø–∞—Ä–æ–ª—å —É–∂–µ –∑–∞–π–Ω—è—Ç–∏–π, –¥–∞–≤–∞–π —ñ–Ω—à–∏–π üòú")
            except Exception as e:
                logger.error(f"Error creating team for user {user_id}: {e}")
                await send_main_menu(message, state, "‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        else:
            await message.answer("–î–æ–±—Ä–µ, –¥–∞–≤–∞–π —â–µ —Ä–∞–∑! –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏:", reply_markup=get_team_creation_keyboard())
            await state.set_state(TeamCreation.team_name)

    @dp.message(TeamCreation.confirm_data)
    async def process_invalid_confirm_data(message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        await message.answer(
            f"–ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –¥–∞–Ω—ñ:\n–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏: {user_data['team_name']}\n–ü–∞—Ä–æ–ª—å: {user_data['team_password']}\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∏–∂—á–µ!",
            reply_markup=get_confirm_data_keyboard()
        )

    @dp.message(lambda message: message.text == "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –∫–æ–º–∞–Ω–¥–∏ üë•")
    async def process_join_team(message: types.Message, state: FSMContext):
        if db.is_user_in_team(message.from_user.id):
            await message.answer(
                "–¢–∏ –≤–∂–µ –≤ –∫–æ–º–∞–Ω–¥—ñ! –°–ø–æ—á–∞—Ç–∫—É –ø–æ–∫–∏–Ω—å –ø–æ—Ç–æ—á–Ω—É –∫–æ–º–∞–Ω–¥—É, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —ñ–Ω—à–æ—ó.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        await message.answer(
            "–ó—ñ–±—Ä–∞–≤—Å—è –∑ —Å–∏–ª–∞–º–∏? –ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ —Å–≤–æ—î—ó –∫–æ–º–∞–Ω–¥–∏! üí™\n\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏:",
            reply_markup=get_team_creation_keyboard()
        )
        await state.set_state(TeamJoin.team_name)

    @dp.message(TeamJoin.team_name)
    async def process_join_team_name(message: types.Message, state: FSMContext):
        if message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é":
            await send_main_menu(message, state)
            return
        team_name = message.text.strip()
        if not db.teams.find_one({"team_name": team_name}):
            await message.answer("‚ô¶Ô∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏:\n‚ÄºÔ∏è –ö–æ–º–∞–Ω–¥–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ —ñ—Å–Ω—É—î. –ü–µ—Ä–µ–≤—ñ—Ä –Ω–∞–∑–≤—É —Ç–∞ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!", reply_markup=get_team_creation_keyboard())
            return
        await state.update_data(team_name=team_name)
        await message.answer(
            "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –∫–æ–º–∞–Ω–¥–∏. –¢–∏ –∂ –π–æ–≥–æ –∑–Ω–∞—î—à, –ø—Ä–∞–≤–¥–∞? üòÖ",
            reply_markup=get_team_creation_keyboard()
        )
        await state.set_state(TeamJoin.team_password)

    @dp.message(TeamJoin.team_password)
    async def process_join_team_password(message: types.Message, state: FSMContext):
        password = message.text.strip()
        user_id = message.from_user.id
        user_data = await state.get_data()
        team_name = user_data["team_name"]
        try:
            team_id, success = db.add_team(team_name, user_id, password)
            if success:
                db.participants.update_one({"user_id": user_id}, {"$set": {"team_id": team_id}})
                team_info, team = await get_team_info(db, user_id)
                new_member = db.participants.find_one({"user_id": user_id})
                new_member_name = new_member["name"] if new_member else "–ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫"
                await message.answer(
                    f"–í—ñ—Ç–∞—é, —Ç–µ–ø–µ—Ä —Ç–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ—î–¥–Ω–∞–≤—Å—è(-–ª–∞—Å—å) –¥–æ –∫–æ–º–∞–Ω–¥–∏ *{team_name}*!\n{team_info.split('\n', 1)[1] if team_info and '\n' in team_info else '–¢–∏ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –∫–æ–º–∞–Ω–¥–∏!'}",
                    parse_mode="Markdown",
                    reply_markup=get_team_menu_keyboard()
                )
                await state.set_state(TeamMenu.main)
                for member_id, member in [(m_id, db.participants.find_one({"user_id": m_id})) for m_id in team["members"] if m_id != user_id]:
                    if member and "chat_id" in member:
                        try:
                            await bot.send_message(
                                chat_id=member["chat_id"],
                                text=f"–í—ñ—Ç–∞—é, –¥–æ –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏ *{team_name}* –¥–æ—î–¥–Ω–∞–≤—Å—è(-–ª–∞—Å—å) *{new_member_name}*! –Ø–∫—â–æ –≤–∏ –Ω–µ –∑–Ω–∞—î—Ç–µ, —Ö—Ç–æ —Ü–µ, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ {config.ORGANIZER_CONTACT}.",
                                parse_mode="Markdown"
                            )
                        except Exception as e:
                            logger.error(f"Error sending notification to user {member_id}: {e}")
                    else:
                        logger.warning(f"No chat_id found for user {member_id} in team {team_name}")
            else:
                await message.answer(
                    "‚ô¶Ô∏è –í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –∫–æ–º–∞–Ω–¥–∏. –¢–∏ –∂ –π–æ–≥–æ –∑–Ω–∞—î—à, –ø—Ä–∞–≤–¥–∞? üòÖ\n‚ÄºÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å –∞–±–æ –∫–æ–º–∞–Ω–¥–∞ –≤–∂–µ –ø–æ–≤–Ω–∞ (4 —É—á–∞—Å–Ω–∏–∫–∏). –ü–µ—Ä–µ–≤—ñ—Ä –¥–∞–Ω—ñ —Ç–∞ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!",
                    reply_markup=get_team_creation_keyboard()
                )
        except Exception as e:
            logger.error(f"Error joining team for user {user_id}: {e}")
            await message.answer(
                "‚ô¶Ô∏è –í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –∫–æ–º–∞–Ω–¥–∏. –¢–∏ –∂ –π–æ–≥–æ –∑–Ω–∞—î—à, –ø—Ä–∞–≤–¥–∞? üòÖ\n‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—ñ –¥–æ –∫–æ–º–∞–Ω–¥–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!",
                reply_markup=get_team_creation_keyboard()
            )

    @dp.message(lambda message: message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    async def process_back_to_main_menu(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state in [TeamCreation.team_name, TeamCreation.team_password, TeamJoin.team_name, TeamJoin.team_password, TeamLeaveConfirm.first_confirm, TeamLeaveConfirm.second_confirm]:
            await send_main_menu(message, state)
        else:
            await send_main_menu(message, state) 

    @dp.message(lambda message: message.text == "üß™ –¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è", TeamMenu.main)
    async def process_test_task(message: types.Message):
        image_path = os.path.join(config.ASSETS_PATH, "test.png")
        if not os.path.exists(image_path):
            logger.error(f"Image file not found at {image_path}")
            await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è test.png –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
        else:
            try:
                photo = FSInputFile(path=image_path)
                await message.answer_photo(photo=photo, caption="üß™ –ì–æ—Ç—É–π—Å—è –¥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è!")
            except Exception as e:
                logger.error(f"Failed to send test.png: {str(e)}")
                await message.answer(f"‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ!")
        
        await message.answer(
            "–ô–æ–π, –π–æ–≥–æ –ø–æ–∫–∏ —Ç—É—Ç –Ω–µ–º–∞—îüò¢ –í–æ–Ω–æ –±—É–¥–µ 15-–≥–æ –ª–∏—Å—Ç–æ–ø–∞–¥–∞. –ó–∞—Ä—è–¥–∂–∞–π –Ω–æ—É—Ç, –∑–∞–≤–∞–Ω—Ç–∞–∂—É–π —É—Å—ñ —Å–ª–æ–≤–Ω–∏–∫–∏ —ñ –±—É–¥—å –≥–æ—Ç–æ–≤–∏–π(-–∞) –¥–æ –±–æ—éüî•\n"
            "‚ÄºÔ∏è –£–≤–∞–≥–∞ ‚ÄºÔ∏è: –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å –º–æ–∂—É—Ç—å –ª–∏—à–µ –∫–æ–º–∞–Ω–¥–∏, —É —è–∫–∏—Ö —î —â–æ–Ω–∞–π–º–µ–Ω—à–µ 3 —É—á–∞—Å–Ω–∏–∫–∏.",
            reply_markup=get_back_keyboard()
        )

    @dp.message(lambda message: message.text == "üö™ –ü–æ–∫–∏–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥—É", TeamMenu.main)
    async def process_leave_team(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        try:
            participant = db.participants.find_one({"user_id": user_id})
            if participant and participant.get("team_id"):
                team = db.teams.find_one({"_id": participant["team_id"]})
                team_name = team["team_name"] if team else "–Ω–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞"
                await message.answer(
                    f"–¢–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–π(-–∞), —â–æ —Ö–æ—á–µ—à –ø–æ–∫–∏–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥—É *{team_name}*? üò¢",
                    parse_mode="Markdown",
                    reply_markup=get_leave_confirm_keyboard()
                )
                await state.set_state(TeamLeaveConfirm.first_confirm)
                await state.update_data(team_name=team_name, team=team)
            else:
                await send_main_menu(message, state, "–¢–∏ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥—ñ, —Ç–æ–∂ –Ω–µ–º–∞—î —â–æ –ø–æ–∫–∏–¥–∞—Ç–∏! üòÖ")
        except Exception as e:
            logger.error(f"Error initiating leave team for user {user_id}: {e}")
            await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –ø–æ–∫–∏–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!", reply_markup=get_team_menu_keyboard())
            await state.set_state(TeamMenu.main)

    @dp.message(lambda message: message.text in ["–¢–∞–∫, –≤–ø–µ–≤–Ω–µ–Ω–∏–π(-–∞) ‚úÖ", "–ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏—Å—å ‚ùå"], TeamLeaveConfirm.first_confirm)
    async def process_leave_first_confirm(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        user_data = await state.get_data()
        team_name = user_data.get("team_name", "–Ω–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")
        if message.text == "–¢–∞–∫, –≤–ø–µ–≤–Ω–µ–Ω–∏–π(-–∞) ‚úÖ":
            await message.answer(
                f"–¢–æ—á–Ω–æ-—Ç–æ—á–Ω–æ –≤–ø–µ–≤–Ω–µ–Ω–∏–π(-–∞)? –¶–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å –ø–æ–∫–∏–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥—É *{team_name}*! üòî",
                parse_mode="Markdown",
                reply_markup=get_leave_confirm_keyboard()
            )
            await state.set_state(TeamLeaveConfirm.second_confirm)
        else:
            team_info, _ = await get_team_info(db, user_id)
            if team_info:
                await message.answer(f"–°—É–ø–µ—Ä, —Ç–∏ –∑–∞–ª–∏—à–∏–≤—Å—è(-–ª–∞—Å—å) —É –∫–æ–º–∞–Ω–¥—ñ! üòä\n{team_info}", reply_markup=get_team_menu_keyboard())
                await state.set_state(TeamMenu.main)
            else:
                await send_main_menu(message, state, "‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")

    @dp.message(lambda message: message.text in ["–¢–∞–∫, –≤–ø–µ–≤–Ω–µ–Ω–∏–π(-–∞) ‚úÖ", "–ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏—Å—å ‚ùå"], TeamLeaveConfirm.second_confirm)
    async def process_leave_second_confirm(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        user_data = await state.get_data()
        team_name = user_data.get("team_name", "–Ω–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")
        team = user_data.get("team")
        if message.text == "–¢–∞–∫, –≤–ø–µ–≤–Ω–µ–Ω–∏–π(-–∞) ‚úÖ":
            try:
                participant = db.participants.find_one({"user_id": user_id})
                if participant and participant.get("team_id"):
                    success = db.leave_team(user_id)
                    if success:
                        await send_main_menu(message, state, f"–¢–∏ —É—Å–ø—ñ—à–Ω–æ –ø–æ–∫–∏–Ω—É–≤(-–ª–∞) –∫–æ–º–∞–Ω–¥—É *{team_name}*! üò¢")
                        if team:
                            for member_id, member in [(m_id, db.participants.find_one({"user_id": m_id})) for m_id in team["members"] if m_id != user_id]:
                                if member and "chat_id" in member:
                                    try:
                                        await bot.send_message(
                                            chat_id=member["chat_id"],
                                            text=f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á *{participant['name']}* –ø–æ–∫–∏–Ω—É–≤(-–ª–∞) –∫–æ–º–∞–Ω–¥—É *{team_name}*!",
                                            parse_mode="Markdown"
                                        )
                                    except Exception as e:
                                        logger.error(f"Error sending leave notification to user {member_id}: {e}")
                                else:
                                    logger.warning(f"No chat_id found for user {member_id} in team {team_name}")
                    else:
                        await message.answer("‚ÄºÔ∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∫–∏–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!", reply_markup=get_team_menu_keyboard())
                        await state.set_state(TeamMenu.main)
                else:
                    await send_main_menu(message, state, "–¢–∏ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥—ñ, —Ç–æ–∂ –Ω–µ–º–∞—î —â–æ –ø–æ–∫–∏–¥–∞—Ç–∏! üòÖ")
            except Exception as e:
                logger.error(f"Error leaving team for user {user_id}: {e}")
                await message.answer("‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!", reply_markup=get_team_menu_keyboard())
                await state.set_state(TeamMenu.main)
        else:
            team_info, _ = await get_team_info(db, user_id)
            if team_info:
                await message.answer(f"–°—É–ø–µ—Ä, —Ç–∏ –∑–∞–ª–∏—à–∏–≤—Å—è(-–ª–∞—Å—å) —É –∫–æ–º–∞–Ω–¥—ñ! üòä\n{team_info}", reply_markup=get_team_menu_keyboard())
                await state.set_state(TeamMenu.main)
            else:
                await send_main_menu(message, state, "‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")

    @dp.message(TeamLeaveConfirm.first_confirm)
    async def process_invalid_first_confirm(message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        team_name = user_data.get("team_name", "–Ω–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")
        await message.answer(
            f"–¢–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–π(-–∞), —â–æ —Ö–æ—á–µ—à –ø–æ–∫–∏–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥—É *{team_name}*? üò¢\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∏–∂—á–µ!",
            parse_mode="Markdown",
            reply_markup=get_leave_confirm_keyboard()
        )

    @dp.message(TeamLeaveConfirm.second_confirm)
    async def process_invalid_second_confirm(message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        team_name = user_data.get("team_name", "–Ω–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")
        await message.answer(
            f"–¢–æ—á–Ω–æ-—Ç–æ—á–Ω–æ –≤–ø–µ–≤–Ω–µ–Ω–∏–π(-–∞)? –¶–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å –ø–æ–∫–∏–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥—É *{team_name}*! üòî\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∏–∂—á–µ!",
            parse_mode="Markdown",
            reply_markup=get_leave_confirm_keyboard()
        )

    @dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥")
    async def process_back_from_task(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        team_info, _ = await get_team_info(db, user_id)
        if team_info:
            await message.answer(team_info, reply_markup=get_team_menu_keyboard())
            await state.set_state(TeamMenu.main)
        else:
            await send_main_menu(message, state, "‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")

    @dp.message(TeamMenu.main)
    async def process_invalid_team_menu(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        team_info, _ = await get_team_info(db, user_id)
        if team_info:
            await message.answer(f"{team_info}\n‚ÄºÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∏–∂—á–µ!", reply_markup=get_team_menu_keyboard())
        else:
            await send_main_menu(message, state, "‚ÄºÔ∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")